<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGJSON: gjson_elements.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGJSON
   &#160;<span id="projectnumber">release_100-d2fdcd7 (git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing and building JSON, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('gjson__elements_8h_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gjson_elements.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gjson__elements_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * \file</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * Embedded JSON builder and parser - Elements</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * PROJECT: GJSON library</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * TARGET SYSTEM: Arduino, STM32, Atmel AT91SAM, portable</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef GJSON_ELEMENTS_H</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define GJSON_ELEMENTS_H</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">namespace </span>gjson {</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * A class representing a basic JSON in-memory element.  This is a parent class to all possible JSON element types and</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * JSON strings ultimately get parsed into objects based off this class</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * \tparam LENGTH Maximum length (including NULL terminator) in characters of a string attribute/property</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t LENGTH&gt;</div>
<div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_element.htm">   20</a></span>&#160;<span class="keyword">class </span><a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a> {</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">     * Enum of possible JSON basic element types</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">   25</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">enum</span> {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        NOTSET,</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        ARRAY,</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        MAP,</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        STRING,</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }<a class="code" href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">TYPE</a>;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">     * Constructor, make stable instance</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">     * \note If parent specified then its next element pointer will be updated with this</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">     * \param[in] e Pointer, parent element or NULL (no parent yet)</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_element.htm#ac74c4cecb610c68ff4c349c79e3423e5">   40</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#ac74c4cecb610c68ff4c349c79e3423e5">JSONElement</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>* e=NULL) : <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#ad3b6b76318e9ecba0d4811c501d3b7e0">e_</a>(NULL) { <span class="comment">// parent pointer</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">if</span> (e) {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            e-&gt;<a class="code" href="classgjson_1_1_j_s_o_n_element.htm#ad40f0fee08ec85671b2ac8aa86f4bf0d">Next</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">     * Get next JSON element</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">     * \return JSON element or NULL</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_element.htm#ad40f0fee08ec85671b2ac8aa86f4bf0d">   52</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>* <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#ad40f0fee08ec85671b2ac8aa86f4bf0d">Next</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#ad3b6b76318e9ecba0d4811c501d3b7e0">e_</a>;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     * Set next JSON element</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     * \param[in] e Pointer to JSON element</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     * \return this</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_element.htm#a12ec343328c4f24c9dca21d5042ab897">   63</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>* <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#a12ec343328c4f24c9dca21d5042ab897">Next</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>* e) {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">if</span> (e) {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#ad3b6b76318e9ecba0d4811c501d3b7e0">e_</a> = e;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">this</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     * Get JSON element type</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     * \return See \ref TYPE</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">   77</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">TYPE</a> <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">Type</a>() {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">TYPE</a><span class="keyword">&gt;</span>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm#a2ab1dc9f4ba28df4717e446c4b04de13">type_</a>);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">     * Set JSON element type</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">     * \param[in] type An element Type numeric</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">     * \return See \ref TYPE</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_element.htm#a39518c65fbd517cb941910cfafee1986">   88</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">TYPE</a> <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#a39518c65fbd517cb941910cfafee1986">Type</a>(<span class="keyword">const</span> <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">TYPE</a> type) {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#a2ab1dc9f4ba28df4717e446c4b04de13">type_</a> = type;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">TYPE</a><span class="keyword">&gt;</span>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm#a2ab1dc9f4ba28df4717e446c4b04de13">type_</a>);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_element.htm#a2ab1dc9f4ba28df4717e446c4b04de13">   95</a></span>&#160;    uint8_t            <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#a2ab1dc9f4ba28df4717e446c4b04de13">type_</a>;            <span class="comment">///&lt; Element type</span></div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_element.htm#ad3b6b76318e9ecba0d4811c501d3b7e0">   96</a></span>&#160;<span class="comment"></span>    <a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>*    <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#ad3b6b76318e9ecba0d4811c501d3b7e0">e_</a>;                  <span class="comment">///&lt; Next item</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span>}; <span class="comment">// class JSONElement</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"> * A class representing a JSON in-memory string element, templated maximum dimension.  This will be either a attribute/property or value</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> * \tparam LENGTH Maximum length (including NULL terminator) in characters of a string attribute/property</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> * \tparam T Numeric data type used in conversion to string.  Default uint8_t</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t LENGTH, <span class="keyword">typename</span> T = u<span class="keywordtype">int</span>8_t&gt;</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm">  107</a></span>&#160;<span class="keyword">class </span><a class="code" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a> : <span class="keyword">public</span> <a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt;LENGTH&gt; {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     * Default constructor, make stable instance.  Optionally allows indication of IsValue and parent in-memeory element</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">     * \note If parent specified then its next element pointer will be updated with this</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">     * \param[in] is_value IsValue boolean, when true(default) indicates string is a value</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">     * \param[in] e Pointer, parent element or NULL (no parent yet)</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#ac4345dff62fd029901c2421e85406198">  117</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ac4345dff62fd029901c2421e85406198">JSONString</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> is_value=<span class="keyword">true</span>, <a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;</a>* e=NULL) : <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a>(is_value), <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>(0), <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a>(false) { <span class="comment">// value change.  literal cannot be empty string</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">JSONElement&lt;LENGTH&gt;::Type</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;::STRING</a>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>[0] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">if</span> (e) {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            e-&gt;Next(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">     * Constructor, make stable instance with given NULL terminated string.  Optionally allows indication of IsValue and Isliteral state</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">     * \attention No checking is performed on literals when isn&#39;t a value string.  You&#39;ve been warned as there are no exceptions!</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     * \param[in] s NULL terminated source string to copy</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     * \param[in] is_value IsValue boolean, when true(default) indicates string is a value</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     * \param[in] is_literal IsLiteral boolean, when true indicates string value is literal, default false</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#ac9ef5efb245daad195e572121e5075ae">  135</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ac9ef5efb245daad195e572121e5075ae">JSONString</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* s, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_value=<span class="keyword">true</span>, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_literal=<span class="keyword">false</span>) : <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a>(is_value), <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a>(is_literal) { <span class="comment">// str + value change</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">JSONElement&lt;LENGTH&gt;::Type</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;::STRING</a>);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>(s, is_literal);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">     * Constructor, make stable instance with given NULL terminated string, parent element and optionally indication of IsValue and IsLiteral states</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">     * \attention No checking is performed on literals when isn&#39;t a value string.  You&#39;ve been warned as there are no exceptions!</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     * \param[in] s NULL terminated source string to copy</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     * \param[in] e Pointer, parent element or NULL (no parent yet)</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     * \param[in] is_value IsValue boolean, when true(default) indicates string is a value</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     * \param[in] is_literal IsLiteral boolean, when true indicates string value is literal, default false</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a6653e2163a85880d02034dc7a3cb7d88">  151</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a6653e2163a85880d02034dc7a3cb7d88">JSONString</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* s, <a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;</a>* e, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_value=<span class="keyword">true</span>, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_literal=<span class="keyword">false</span>) : <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a>(is_value), <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a>(is_literal) { <span class="comment">// str + value change + parent pointer</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">JSONElement&lt;LENGTH&gt;::Type</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;::STRING</a>);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>(s, is_literal);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">if</span> (e) {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            e-&gt;<a class="code" href="classgjson_1_1_j_s_o_n_element.htm#ad40f0fee08ec85671b2ac8aa86f4bf0d">Next</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">     * Constructor, make stable instance with given NULL terminated string, string length, parent element and optionally indication of IsValue and IsLiteral states</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">     * \attention No checking is performed on literals when isn&#39;t a value string.  You&#39;ve been warned as there are no exceptions!</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">     * \param[in] s NULL terminated source string to copy</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">     * \param[in] e Pointer, parent element or NULL (no parent yet)</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">     * \param[in] l NULL terminated source string length (characters), not including NULL</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     * \param[in] is_value IsValue boolean, when true(default) indicates string is a value</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     * \param[in] is_literal IsLiteral boolean, when true indicates string value is literal, default false</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a7ef807de20090e57d9c735f1eeb0fad8">  171</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a7ef807de20090e57d9c735f1eeb0fad8">JSONString</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* s, uint16_t l, <a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;</a>* e, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_value=<span class="keyword">true</span>, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_literal=<span class="keyword">false</span>) : <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a>(is_value), <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a>(is_literal) { <span class="comment">// str + length + value change + parent pointer</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">JSONElement&lt;LENGTH&gt;::Type</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;::STRING</a>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>(s, is_literal, l);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">if</span> (e) {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            e-&gt;<a class="code" href="classgjson_1_1_j_s_o_n_element.htm#ad40f0fee08ec85671b2ac8aa86f4bf0d">Next</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     * Constructor, make stable instance with given type and sprint format string.  Optionally allows indication of IsValue and Isliteral state</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     * \attention No checking is performed on literals when isn&#39;t a value string.  You&#39;ve been warned as there are no exceptions!</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     * \param[in] d Data to convert</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">     * \param[in] format Format string for conversion using sprintf</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">     * \param[in] is_value IsValue boolean, when true(default) indicates string is a value</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     * \param[in] prefer_literal Prefer Literal flag, indicates data string contains a JSON literal value, default true</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#ad969b7d7e6e9de05ee7f639ce2e061e8">  190</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ad969b7d7e6e9de05ee7f639ce2e061e8">JSONString</a>(<span class="keyword">const</span> T d, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_value=<span class="keyword">true</span>, <span class="keyword">const</span> <span class="keywordtype">bool</span> prefer_literal=<span class="keyword">true</span>) : <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a>(is_value) { <span class="comment">// str + value change</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">JSONElement&lt;LENGTH&gt;::Type</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;::STRING</a>);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        Data&lt;T&gt;(d, format, prefer_literal);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">     * Constructor, make stable instance with given type and sprint format string.  Optionally allows indication of IsValue and Isliteral state</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">     * \attention No checking is performed on literals when isn&#39;t a value string.  You&#39;ve been warned as there are no exceptions!</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">     * \param[in] d Data to convert</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">     * \param[in] format Format string for conversion using sprintf</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     * \param[in] e Pointer, parent element or NULL (no parent yet)</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">     * \param[in] is_value IsValue boolean, when true(default) indicates string is a value</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">     * \param[in] prefer_literal Prefer Literal flag, indicates data string contains a JSON literal value, default true</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a662269f37d783642caa5d41375c029f9">  207</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a662269f37d783642caa5d41375c029f9">JSONString</a>(<span class="keyword">const</span> T d, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;</a>* e, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_value=<span class="keyword">true</span>, <span class="keyword">const</span> <span class="keywordtype">bool</span> prefer_literal=<span class="keyword">true</span>) : <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a>(is_value) { <span class="comment">// str + value change + parent pointer</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">JSONElement&lt;LENGTH&gt;::Type</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;::STRING</a>);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        Data&lt;T&gt;(d, format, prefer_literal);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordflow">if</span> (e) {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            e-&gt;<a class="code" href="classgjson_1_1_j_s_o_n_element.htm#ad40f0fee08ec85671b2ac8aa86f4bf0d">Next</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">     * Query string length</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">     * \return Character count, not including NULL</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a113be6765c9220579d692e4b07217d7c">  221</a></span>&#160;    uint16_t <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a113be6765c9220579d692e4b07217d7c">Length</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">     * Set string length.  Can be used to truncate, will move NULL location as required</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">     * \param[in] l Length, characters, not including NULL</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">     * \return Character count, not including NULL</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#ab73227c1f8c1c632e2a7c1b2fd0a382c">  232</a></span>&#160;    uint16_t <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ab73227c1f8c1c632e2a7c1b2fd0a382c">Length</a>(<span class="keyword">const</span> uint16_t l) {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">if</span> (l &lt; (LENGTH-1)) {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a> &gt; l) {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>[l] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a> = l;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">     * Convert integer type to data string</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">     * \attention You can only specify literal true or use literal exponents if this JSON string is IsValue=true, i.e. not a property/attribute</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">     * \attention Care should be taken that the string buffer size is enough for conversion</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">     * \param[in] d  Data to convert</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">     * \param[in] format same as sprintf format string</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">     * \param[in] prefer_literal Prefer Literal flag, indicates data string contains a JSON literal value, default true</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">     * \param[in] allow_exponent Allow use of literal exponent values, default GJSON_DEFAULT_EXPONENTIAL_NOTATION</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">     * \tparam DT Data type</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">     * \retval true Data accepted</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">     * \retval false Data accepted but not literal</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> DT&gt;</div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#ae6299dec62ffdc27b5f3e7124fef740b">  259</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ae6299dec62ffdc27b5f3e7124fef740b">Data</a>(<span class="keyword">const</span> DT d, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, <span class="keyword">const</span> <span class="keywordtype">bool</span> prefer_literal=<span class="keyword">true</span>, <span class="keyword">const</span> <span class="keywordtype">bool</span> allow_exponent=<a class="code" href="gjson_8h.htm#a43451372ba40eb5393e5566343559c69">GJSON_DEFAULT_EXPONENTIAL_NOTATION</a>) {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordtype">bool</span> r = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a> = snprintf(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>, LENGTH, format, d);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>&gt;LENGTH) {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a> = 0;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>[0] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        }</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="comment">//      char yyy[32];</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">//          strcpy(string_, &quot;0&quot;);</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">//          length_ = 1;</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">//      sprintf(yyy, format, d);</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">//      Serial.println(format);</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">/*      length_ = strlen(string_);</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">        if (length_ &gt;= LENGTH) {</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">            Serial.println(&quot;Over&quot;);</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">            strcpy(string_, &quot;0&quot;);</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">            length_ = 1;</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">        }else {</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">            memcpy(string_, yyy, length_);</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">        }*/</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a>) {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keywordflow">if</span> (prefer_literal) {</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a7e8f596709abf719e0e3ba6664e0e048">JSONSupport::IsLiteral</a>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>, <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>, allow_exponent)) {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    r = <span class="keyword">false</span>;    <span class="comment">// Didn&#39;t get what you wanted</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                <span class="comment">// Value is quoted string</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a> = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordflow">if</span> (prefer_literal) {</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                r = <span class="keyword">false</span>;    <span class="comment">// Didn&#39;t get what you wanted</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            }</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a> = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    } <span class="comment">// Data(...)</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">     * Set string data and additional type meta like IsLiteral and allow literal exponents</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">     * \attention You can only specify literal true or use literal exponents if this JSON string is IsValue=true, i.e. not a property/attribute</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">     * \note Parser will use this method as main JSON data is handled like a large string</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">     * \param[in] d Pointer to data string, NULL terminated for copy</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">     * \param[in] prefer_literal Prefer Literal flag, indicates data string contains a JSON literal value, default false</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">     * \param[in] length Data string length, characters.  0 find string length internally via strlen(...)</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">     * \param[in] allow_exponent Allow use of literal exponent values, default GJSON_DEFAULT_EXPONENTIAL_NOTATION</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">     * \retval true Data accepted</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">     * \retval false Data accepted but not literal</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#ae686c31d5cc170c6f42bb375b3356d32">  318</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ae686c31d5cc170c6f42bb375b3356d32">Data</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* d, <span class="keyword">const</span> <span class="keywordtype">bool</span> prefer_literal=<span class="keyword">false</span>, <span class="keyword">const</span> uint16_t length=0, <span class="keyword">const</span> <span class="keywordtype">bool</span> allow_exponent=<a class="code" href="gjson_8h.htm#a43451372ba40eb5393e5566343559c69">GJSON_DEFAULT_EXPONENTIAL_NOTATION</a>) {</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordtype">bool</span> r = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordflow">if</span> (!length) {</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            uint8_t dl = strlen(d);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            uint8_t l = (dl&lt;<span class="keyword">sizeof</span>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>) ? dl : (<span class="keyword">sizeof</span>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>)-1));</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>[l] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a> = l;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            strncpy(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>, d, l);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            uint8_t l = (<span class="keyword">sizeof</span>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>)&lt;length ? <span class="keyword">sizeof</span>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>)-1 : length);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>[0] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            strncpy(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>, d, l);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>[l] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a> = l;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a>) {</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keywordflow">if</span> (prefer_literal) {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a7e8f596709abf719e0e3ba6664e0e048">JSONSupport::IsLiteral</a>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>, <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>, allow_exponent)) {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                    r = <span class="keyword">false</span>;    <span class="comment">// Didn&#39;t get what you wanted</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                }</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                <span class="comment">// Value is quoted string</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a> = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keywordflow">if</span> (prefer_literal) {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                r = <span class="keyword">false</span>;    <span class="comment">// Didn&#39;t get what you wanted</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a> = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    } <span class="comment">// Data(...)</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">     * Get string data</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">     * \attention To simply design this pointer is to an internally managed string.  Care should be taken not to corrupt</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment">     * \return String pointer</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00366"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">  366</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>* const<span class="keyword">&gt;</span>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">     * Query is string data a value or property/attribute</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">     * \retval true Value string</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">     * \retval false Property/attribute</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#ae9cf11bdbf0bd7694e9777d36ced8340">  377</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ae9cf11bdbf0bd7694e9777d36ced8340">IsValue</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a>;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    }</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">     * Set string data IsValue</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">     * \param[in] is_value Boolean indicating (true) string data is value otherwise (false) property/attribute</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">     * \return See \ref IsValue</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a57fa50f82794bc585f86fcf77b279dd7">  388</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a57fa50f82794bc585f86fcf77b279dd7">Value</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> is_value) {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a> = is_value;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ae9cf11bdbf0bd7694e9777d36ced8340">IsValue</a>();</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    }</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160; </div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">     * Query string data value, is JSON literal</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">     * \return Boolean</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00400"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a4c3283b9cf0f4c4bdf3543469e7a4f94">  400</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a4c3283b9cf0f4c4bdf3543469e7a4f94">IsValueLiteral</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a>;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">     * Query string value for JSON literal null</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">     * \return Boolean</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a3405800ee596a60d218fdf4a1aadb625">  410</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a3405800ee596a60d218fdf4a1aadb625">IsNull</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keywordtype">bool</span> b = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a> &amp;&amp; <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a> &amp;&amp; <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a4b57f4c7a5872e11958400c7d45991ba">JSONSupport::IsNull</a>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>, <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>)) {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            b = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160; </div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="keywordflow">return</span> b;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    }</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160; </div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">     * Set data string to JSON literal null.  IsLiteral will be set when element a value string</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">     * \attention You can only use this function correctly if your string maximum has enough space for literal string</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#ac8e2255110e706a41b2f0b883b81493b">  426</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ac8e2255110e706a41b2f0b883b81493b">Null</a>() {</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">sizeof</span>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>)&lt;5) {</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="comment">// Cannot do much in this situation, it does mean words like &quot;true&quot;, &quot;false&quot; arn&#39;t going to work, really this should be an exception</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>(<span class="stringliteral">&quot;0&quot;</span>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>(<span class="stringliteral">&quot;null&quot;</span>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        }</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">     * Query string value for JSON literal boolean</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">     * \return Boolean</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00442"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#aa0f8ad4bdbc1ff7e55687a579d0852dd">  442</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#aa0f8ad4bdbc1ff7e55687a579d0852dd">IsBoolean</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keywordtype">bool</span> b = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160; </div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a> &amp;&amp; <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a> &amp;&amp; <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a1af36d14f15f04901d5a73bad95dea53">JSONSupport::IsBoolean</a>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>, <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>)) {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            b = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        }</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keywordflow">return</span> b;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    }</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">     * Set data string to JSON literal boolean.  IsLiteral will be set when element a value string</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">     * \attention You can only use this function correctly if your string maximum has enough space for literal string</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00458"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a64678de5bfca0f2cdf6e4985b8be860d">  458</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a64678de5bfca0f2cdf6e4985b8be860d">Boolean</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> v) {</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">sizeof</span>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>)&lt;6) {</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="comment">// Cannot do much in this situation, it does mean words like &quot;true&quot;, &quot;false&quot; arn&#39;t going to work, really this should be an exception</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="keywordflow">if</span> (v) {</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>(<span class="stringliteral">&quot;0&quot;</span>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>(<span class="stringliteral">&quot;1&quot;</span>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            }</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keywordflow">if</span> (v) {</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>(<span class="stringliteral">&quot;true&quot;</span>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>(<span class="stringliteral">&quot;false&quot;</span>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            }</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    }</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160; </div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">     * Query string value is integer with optional leading zero inclusion</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment">     * \param[in] allow_leading_zero Default(false), see \ref JSONSupport::IsInt</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">     * \return Boolean</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00483"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a3e56ed57c4722754a951661974580888">  483</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a3e56ed57c4722754a951661974580888">IsInt</a>(<span class="keywordtype">bool</span> allow_leading_zero=<span class="keyword">false</span>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#ada99703626a311f7c9cc1b6d2e140519">JSONSupport::IsInt</a>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>, <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>, allow_leading_zero);</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    }</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">     * Query string value is decimal.  See \ref JSONSupport::IsDecimal</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment">     * \return Boolean</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00493"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a40377dc6c708d77928cf596c6d5f7b71">  493</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a40377dc6c708d77928cf596c6d5f7b71">IsDecimal</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a0ca9873f1df6ebd2e9eb84dad783300a">JSONSupport::IsDecimal</a>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>, <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>, <a class="code" href="gjson_8h.htm#a43451372ba40eb5393e5566343559c69">GJSON_DEFAULT_EXPONENTIAL_NOTATION</a>);</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160; </div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">     * Query string value is hexadecimal.  See \ref JSONSupport::IsDecimal</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment">     * \return Boolean</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00503"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#aa51515cca0fb7fadfd3204acac180273">  503</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#aa51515cca0fb7fadfd3204acac180273">IsHex</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> prefix_0x=<span class="keyword">true</span>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#aff8020bb3920a3d2df1376981b8d898a">JSONSupport::IsHex</a>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>, <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>, prefix_0x);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    }</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160; </div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">     * Equals comparison operator, check string against given subject (case sensitive)</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment">     * \param[in] rhs JSONString&lt;LENGTH&gt; reference string (subject)</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">     * \retval true strings match</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">     * \retval false strings differ</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00515"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#afe2d2eeff6e2299521f0431b5e2f10aa">  515</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#afe2d2eeff6e2299521f0431b5e2f10aa">operator==</a>(<span class="keyword">const</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm">JSONString&lt;LENGTH&gt;</a>&amp; rhs)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="keywordtype">bool</span> result = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160; </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a113be6765c9220579d692e4b07217d7c">Length</a>() == rhs.length()) {</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            !<a class="code" href="classgjson_1_1_j_s_o_n_support.htm#ac8df4eb100877f83f5264ec8df7c5456">JSONSupport::StrNCmp</a>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>(), rhs.<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ae6299dec62ffdc27b5f3e7124fef740b">Data</a>(), rhs.<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a113be6765c9220579d692e4b07217d7c">Length</a>()) ? result=<span class="keyword">true</span>: result=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        }</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160; </div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    }</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160; </div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment">     * Not equals comparison operator, check string against given subject (case sensitive)</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment">     * \param[in] rhs JSONString&lt;LENGTH&gt; reference string (subject)</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment">     * \retval true strings differ</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment">     * \retval false strings match</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00533"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a911c9f323baba4694d426d14c5ed691f">  533</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a911c9f323baba4694d426d14c5ed691f">operator!=</a>(<span class="keyword">const</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm">JSONString&lt;LENGTH&gt;</a>&amp; rhs)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs);</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    }</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160; </div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment">   /**</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment">     * Equals comparison operator, check string against given subject (case sensitive)</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment">     * \param[in] rhs ASCII subject string (subject)</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment">     * \retval true strings match</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment">     * \retval false strings differ</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00545"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a0799b6cbde7ad5a0119a1187b439cabc">  545</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a0799b6cbde7ad5a0119a1187b439cabc">operator==</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* rhs)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        uint8_t l;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        <span class="keywordtype">bool</span> result = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160; </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="keywordflow">if</span> (rhs &amp;&amp; (l=strlen(rhs)) == <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a113be6765c9220579d692e4b07217d7c">Length</a>()) {</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            !<a class="code" href="classgjson_1_1_j_s_o_n_support.htm#ac8df4eb100877f83f5264ec8df7c5456">JSONSupport::StrNCmp</a>(<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a>(), rhs, l) ? result=<span class="keyword">true</span>: result=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        }</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160; </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    }</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160; </div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="comment">   /**</span></div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="comment">     * Not equals comparison operator, check string against given subject (case sensitive)</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="comment">     * \param[in] rhs ASCII subject string (subject)</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="comment">     * \retval true strings differ</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment">     * \retval false strings match</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00564"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#afffd88597a128af985bc22505f8b4134">  564</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#afffd88597a128af985bc22505f8b4134">operator!=</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* rhs)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    }</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160; </div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00569"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">  569</a></span>&#160;    <span class="keywordtype">char</span>            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a>[LENGTH];        <span class="comment">///&lt; String</span></div>
<div class="line"><a name="l00570"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">  570</a></span>&#160;<span class="comment"></span>    uint16_t        <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a>;                <span class="comment">///&lt; String length</span></div>
<div class="line"><a name="l00571"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">  571</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span>            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a>;              <span class="comment">///&lt; Is value or key</span></div>
<div class="line"><a name="l00572"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">  572</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span>            <a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a>;               <span class="comment">///&lt; Value is literal</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment"></span>}; <span class="comment">// JSONString</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment"> * A class representing a JSON in-memory array element</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment"> * \tparam LENGTH Maximum length (including NULL terminator) in characters of a string attribute/property</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t LENGTH&gt;</div>
<div class="line"><a name="l00582"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_array.htm">  582</a></span>&#160;<span class="keyword">class </span><a class="code" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray</a> : <span class="keyword">public</span> <a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt;LENGTH&gt; {</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="comment">     * Default constructor, make stable instance.  Optionally allows indication of IsOpen and parent in-memeory element</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment">     * \note If parent specified then its next element pointer will be updated with this</span></div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="comment">     * \param[in] e Pointer, parent element or NULL (no parent yet)</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment">     * \param[in] is_open IsOpen boolean, when true(default) indicates opening (start)</span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00592"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_array.htm#ae83b1d997d3d43e3d5cc24880d0c7d74">  592</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_array.htm#ae83b1d997d3d43e3d5cc24880d0c7d74">JSONArray</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;</a>* e=NULL, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_open=<span class="keyword">true</span>) : <a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt;LENGTH&gt;(e), <a class="code" href="classgjson_1_1_j_s_o_n_array.htm#a5a72a2e77b25f4ec3653acf153b02863">is_open_</a>(is_open) {    <span class="comment">// e before is_open because close will always refer to an e instance</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">JSONElement&lt;LENGTH&gt;::Type</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;::ARRAY</a>);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    }</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160; </div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment">     * Default constructor, make stable instance.  Optionally allows indication of IsOpen</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment">     * \param[in] is_open IsOpen boolean, when true(default) indicates array opening (start)</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00602"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_array.htm#a618cd2480cf54f5b9122ed5136490821">  602</a></span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_array.htm#a618cd2480cf54f5b9122ed5136490821">JSONArray</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> is_open) : <a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt;LENGTH&gt;(NULL), <a class="code" href="classgjson_1_1_j_s_o_n_array.htm#a5a72a2e77b25f4ec3653acf153b02863">is_open_</a>(is_open) {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">JSONElement&lt;LENGTH&gt;::Type</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;::ARRAY</a>);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="comment">     * Query isOpen property of array element</span></div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment">     * \return Boolean</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00612"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_array.htm#a4b40f47562c0f15f0e813c09badc569b">  612</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_array.htm#a4b40f47562c0f15f0e813c09badc569b">IsOpen</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classgjson_1_1_j_s_o_n_array.htm#a5a72a2e77b25f4ec3653acf153b02863">is_open_</a>;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    }</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160; </div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="comment">     * Set isOpen property of array element</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="comment">     * \param[in] is_open IsOpen boolean, when true indicates array opening (start) or closing (end)</span></div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="comment">     * \return Boolean, see \ref IsOpen</span></div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00623"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_array.htm#abb04565dccb343de4e73e9a8e045a803">  623</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_array.htm#abb04565dccb343de4e73e9a8e045a803">Open</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> is_open) {</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_array.htm#a5a72a2e77b25f4ec3653acf153b02863">is_open_</a> = is_open;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160; </div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classgjson_1_1_j_s_o_n_array.htm#a4b40f47562c0f15f0e813c09badc569b">IsOpen</a>();</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    }</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160; </div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00630"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_array.htm#a5a72a2e77b25f4ec3653acf153b02863">  630</a></span>&#160;    <span class="keywordtype">bool</span>            <a class="code" href="classgjson_1_1_j_s_o_n_array.htm#a5a72a2e77b25f4ec3653acf153b02863">is_open_</a>;               <span class="comment">///&lt; Is Open</span></div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="comment"></span>}; <span class="comment">// class JSONArray</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160; </div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment"> * A class representing a JSON in-memory map element</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment"> * \tparam LENGTH Maximum length (including NULL terminator) in characters of a string attribute/property</span></div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t LENGTH&gt;</div>
<div class="line"><a name="l00640"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_map.htm">  640</a></span>&#160;<span class="keyword">class </span><a class="code" href="classgjson_1_1_j_s_o_n_map.htm">JSONMap</a> : <span class="keyword">public</span> <a class="code" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray</a>&lt;LENGTH&gt; {</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_map.htm">JSONMap</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;</a>* e=NULL, <span class="keyword">const</span> <span class="keywordtype">bool</span> is_open=<span class="keyword">true</span>) : <a class="code" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray&lt;LENGTH&gt;</a>(e, is_open) {    <span class="comment">// e before isOpen because close will always refer to an e instance</span></div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">JSONArray&lt;LENGTH&gt;::Type</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;::MAP</a>);</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    }</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160; </div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <a class="code" href="classgjson_1_1_j_s_o_n_map.htm">JSONMap</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> is_open) : <a class="code" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray&lt;LENGTH&gt;</a>(is_open) {</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        <a class="code" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">JSONArray&lt;LENGTH&gt;::Type</a>(<a class="code" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement&lt;LENGTH&gt;::MAP</a>);</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    }</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;}; <span class="comment">// class JSONMap</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160; </div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;}; <span class="comment">// namespace gjson</span></div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160; </div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="preprocessor">#endif // GJSON_ELEMENTS_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agjson_8h_htm_a43451372ba40eb5393e5566343559c69"><div class="ttname"><a href="gjson_8h.htm#a43451372ba40eb5393e5566343559c69">GJSON_DEFAULT_EXPONENTIAL_NOTATION</a></div><div class="ttdeci">#define GJSON_DEFAULT_EXPONENTIAL_NOTATION</div><div class="ttdoc">Build macro to control default acceptance of exponential notation in JSON literal strings.</div><div class="ttdef"><b>Definition:</b> gjson.h:98</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_element_htm_a12ec343328c4f24c9dca21d5042ab897"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_element.htm#a12ec343328c4f24c9dca21d5042ab897">gjson::JSONElement::Next</a></div><div class="ttdeci">JSONElement * Next(JSONElement *e)</div><div class="ttdoc">Set next JSON element.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:63</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_element_htm_a39518c65fbd517cb941910cfafee1986"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_element.htm#a39518c65fbd517cb941910cfafee1986">gjson::JSONElement::Type</a></div><div class="ttdeci">TYPE Type(const TYPE type)</div><div class="ttdoc">Set JSON element type.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:88</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a18d5aa55a97cd789d0de165aadb1eff4"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">gjson::JSONString::length_</a></div><div class="ttdeci">uint16_t length_</div><div class="ttdoc">String length.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:570</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_element_htm_ad40f0fee08ec85671b2ac8aa86f4bf0d"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_element.htm#ad40f0fee08ec85671b2ac8aa86f4bf0d">gjson::JSONElement::Next</a></div><div class="ttdeci">JSONElement * Next() const</div><div class="ttdoc">Get next JSON element.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:52</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a14f69b5200814dec09156d722fb60c2e"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">gjson::JSONString::string_</a></div><div class="ttdeci">char string_[LENGTH]</div><div class="ttdoc">String.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:569</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_array_htm_ae83b1d997d3d43e3d5cc24880d0c7d74"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_array.htm#ae83b1d997d3d43e3d5cc24880d0c7d74">gjson::JSONArray::JSONArray</a></div><div class="ttdeci">JSONArray(JSONElement&lt; LENGTH &gt; *e=NULL, const bool is_open=true)</div><div class="ttdoc">Default constructor, make stable instance.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:592</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_aff8020bb3920a3d2df1376981b8d898a"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#aff8020bb3920a3d2df1376981b8d898a">gjson::JSONSupport::IsHex</a></div><div class="ttdeci">static bool IsHex(const char *s, const uint16_t l, const bool prefix_0x=true)</div><div class="ttdoc">Query is string numeric hexadecimal with optional inclusion of prefix.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:257</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_array_htm_a618cd2480cf54f5b9122ed5136490821"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_array.htm#a618cd2480cf54f5b9122ed5136490821">gjson::JSONArray::JSONArray</a></div><div class="ttdeci">JSONArray(const bool is_open)</div><div class="ttdoc">Default constructor, make stable instance.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:602</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a0799b6cbde7ad5a0119a1187b439cabc"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a0799b6cbde7ad5a0119a1187b439cabc">gjson::JSONString::operator==</a></div><div class="ttdeci">bool operator==(const char *rhs) const</div><div class="ttdoc">Equals comparison operator, check string against given subject (case sensitive)</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:545</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a911c9f323baba4694d426d14c5ed691f"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a911c9f323baba4694d426d14c5ed691f">gjson::JSONString::operator!=</a></div><div class="ttdeci">bool operator!=(const JSONString&lt; LENGTH &gt; &amp;rhs) const</div><div class="ttdoc">Not equals comparison operator, check string against given subject (case sensitive)</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:533</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a57fa50f82794bc585f86fcf77b279dd7"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a57fa50f82794bc585f86fcf77b279dd7">gjson::JSONString::Value</a></div><div class="ttdeci">bool Value(const bool is_value)</div><div class="ttdoc">Set string data IsValue.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:388</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a9e330fc617fe06e7b85e27402a7e70de"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">gjson::JSONString::is_value_</a></div><div class="ttdeci">bool is_value_</div><div class="ttdoc">Is value or key.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:571</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a40377dc6c708d77928cf596c6d5f7b71"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a40377dc6c708d77928cf596c6d5f7b71">gjson::JSONString::IsDecimal</a></div><div class="ttdeci">bool IsDecimal() const</div><div class="ttdoc">Query string value is decimal.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:493</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_afffd88597a128af985bc22505f8b4134"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#afffd88597a128af985bc22505f8b4134">gjson::JSONString::operator!=</a></div><div class="ttdeci">bool operator!=(const char *rhs) const</div><div class="ttdoc">Not equals comparison operator, check string against given subject (case sensitive)</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:564</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_ac8df4eb100877f83f5264ec8df7c5456"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#ac8df4eb100877f83f5264ec8df7c5456">gjson::JSONSupport::StrNCmp</a></div><div class="ttdeci">static int StrNCmp(const char *s1, const char *s2, const int n, const bool case_sensitive=true)</div><div class="ttdoc">Alternative from strncmpi and strncmp.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:384</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_element_htm_aac7ccd0da6e57c643a306e188ac65437"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">gjson::JSONElement::TYPE</a></div><div class="ttdeci">TYPE</div><div class="ttdoc">Enum of possible JSON basic element types.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:25</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a64678de5bfca0f2cdf6e4985b8be860d"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a64678de5bfca0f2cdf6e4985b8be860d">gjson::JSONString::Boolean</a></div><div class="ttdeci">void Boolean(const bool v)</div><div class="ttdoc">Set data string to JSON literal boolean.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:458</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_array_htm"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_array.htm">gjson::JSONArray</a></div><div class="ttdoc">A class representing a JSON in-memory array element.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:582</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_ada99703626a311f7c9cc1b6d2e140519"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#ada99703626a311f7c9cc1b6d2e140519">gjson::JSONSupport::IsInt</a></div><div class="ttdeci">static bool IsInt(const char *s, const uint16_t l, bool allow_leading=false)</div><div class="ttdoc">Query is string numeric integer with optional leading zero control.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:88</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a98817960986a9a2edeec9586aa19d106"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">gjson::JSONString::literal_</a></div><div class="ttdeci">bool literal_</div><div class="ttdoc">Value is literal.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:572</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_array_htm_a4b40f47562c0f15f0e813c09badc569b"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_array.htm#a4b40f47562c0f15f0e813c09badc569b">gjson::JSONArray::IsOpen</a></div><div class="ttdeci">bool IsOpen() const</div><div class="ttdoc">Query isOpen property of array element.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:612</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_acba03aa85392522c5f5fb3dd54c8365f"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">gjson::JSONString::Data</a></div><div class="ttdeci">const char * Data() const</div><div class="ttdoc">Get string data.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:366</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_a7e8f596709abf719e0e3ba6664e0e048"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#a7e8f596709abf719e0e3ba6664e0e048">gjson::JSONSupport::IsLiteral</a></div><div class="ttdeci">static bool IsLiteral(const char *s, const uint16_t l, const bool allow_exponent=true)</div><div class="ttdoc">Query is string JSON literal with optional exponent check.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:291</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_ae6299dec62ffdc27b5f3e7124fef740b"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#ae6299dec62ffdc27b5f3e7124fef740b">gjson::JSONString::Data</a></div><div class="ttdeci">bool Data(const DT d, const char *format, const bool prefer_literal=true, const bool allow_exponent=GJSON_DEFAULT_EXPONENTIAL_NOTATION)</div><div class="ttdoc">Convert integer type to data string.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:259</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_element_htm_ad3b6b76318e9ecba0d4811c501d3b7e0"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_element.htm#ad3b6b76318e9ecba0d4811c501d3b7e0">gjson::JSONElement::e_</a></div><div class="ttdeci">JSONElement * e_</div><div class="ttdoc">Next item.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:96</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_a4b57f4c7a5872e11958400c7d45991ba"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#a4b57f4c7a5872e11958400c7d45991ba">gjson::JSONSupport::IsNull</a></div><div class="ttdeci">static bool IsNull(const char *s, const uint16_t l)</div><div class="ttdoc">Query is string a JSON literal null.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:25</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_ab73227c1f8c1c632e2a7c1b2fd0a382c"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#ab73227c1f8c1c632e2a7c1b2fd0a382c">gjson::JSONString::Length</a></div><div class="ttdeci">uint16_t Length(const uint16_t l)</div><div class="ttdoc">Set string length.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:232</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a662269f37d783642caa5d41375c029f9"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a662269f37d783642caa5d41375c029f9">gjson::JSONString::JSONString</a></div><div class="ttdeci">JSONString(const T d, const char *format, JSONElement&lt; LENGTH &gt; *e, const bool is_value=true, const bool prefer_literal=true)</div><div class="ttdoc">Constructor, make stable instance with given type and sprint format string.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:207</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_ae686c31d5cc170c6f42bb375b3356d32"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#ae686c31d5cc170c6f42bb375b3356d32">gjson::JSONString::Data</a></div><div class="ttdeci">bool Data(const char *d, const bool prefer_literal=false, const uint16_t length=0, const bool allow_exponent=GJSON_DEFAULT_EXPONENTIAL_NOTATION)</div><div class="ttdoc">Set string data and additional type meta like IsLiteral and allow literal exponents.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:318</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_ae9cf11bdbf0bd7694e9777d36ced8340"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#ae9cf11bdbf0bd7694e9777d36ced8340">gjson::JSONString::IsValue</a></div><div class="ttdeci">bool IsValue() const</div><div class="ttdoc">Query is string data a value or property/attribute.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:377</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_ac4345dff62fd029901c2421e85406198"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#ac4345dff62fd029901c2421e85406198">gjson::JSONString::JSONString</a></div><div class="ttdeci">JSONString(const bool is_value=true, JSONElement&lt; LENGTH &gt; *e=NULL)</div><div class="ttdoc">Default constructor, make stable instance.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:117</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_map_htm"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_map.htm">gjson::JSONMap</a></div><div class="ttdoc">A class representing a JSON in-memory map element.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:640</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_a1af36d14f15f04901d5a73bad95dea53"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#a1af36d14f15f04901d5a73bad95dea53">gjson::JSONSupport::IsBoolean</a></div><div class="ttdeci">static bool IsBoolean(const char *s, const uint16_t l)</div><div class="ttdoc">Query is string a JSON literal boolean.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:43</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_array_htm_a5a72a2e77b25f4ec3653acf153b02863"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_array.htm#a5a72a2e77b25f4ec3653acf153b02863">gjson::JSONArray::is_open_</a></div><div class="ttdeci">bool is_open_</div><div class="ttdoc">Is Open.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:630</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_ac9ef5efb245daad195e572121e5075ae"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#ac9ef5efb245daad195e572121e5075ae">gjson::JSONString::JSONString</a></div><div class="ttdeci">JSONString(const char *s, const bool is_value=true, const bool is_literal=false)</div><div class="ttdoc">Constructor, make stable instance with given NULL terminated string.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:135</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a3405800ee596a60d218fdf4a1aadb625"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a3405800ee596a60d218fdf4a1aadb625">gjson::JSONString::IsNull</a></div><div class="ttdeci">bool IsNull() const</div><div class="ttdoc">Query string value for JSON literal null.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:410</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_array_htm_abb04565dccb343de4e73e9a8e045a803"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_array.htm#abb04565dccb343de4e73e9a8e045a803">gjson::JSONArray::Open</a></div><div class="ttdeci">bool Open(const bool is_open)</div><div class="ttdoc">Set isOpen property of array element.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:623</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a3e56ed57c4722754a951661974580888"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a3e56ed57c4722754a951661974580888">gjson::JSONString::IsInt</a></div><div class="ttdeci">bool IsInt(bool allow_leading_zero=false) const</div><div class="ttdoc">Query string value is integer with optional leading zero inclusion.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:483</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a113be6765c9220579d692e4b07217d7c"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a113be6765c9220579d692e4b07217d7c">gjson::JSONString::Length</a></div><div class="ttdeci">uint16_t Length() const</div><div class="ttdoc">Query string length.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:221</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a6653e2163a85880d02034dc7a3cb7d88"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a6653e2163a85880d02034dc7a3cb7d88">gjson::JSONString::JSONString</a></div><div class="ttdeci">JSONString(const char *s, JSONElement&lt; LENGTH &gt; *e, const bool is_value=true, const bool is_literal=false)</div><div class="ttdoc">Constructor, make stable instance with given NULL terminated string, parent element and optionally in...</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:151</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a></div><div class="ttdoc">A class representing a JSON in-memory string element, templated maximum dimension.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:107</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_aa0f8ad4bdbc1ff7e55687a579d0852dd"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#aa0f8ad4bdbc1ff7e55687a579d0852dd">gjson::JSONString::IsBoolean</a></div><div class="ttdeci">bool IsBoolean() const</div><div class="ttdoc">Query string value for JSON literal boolean.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:442</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_ac8e2255110e706a41b2f0b883b81493b"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#ac8e2255110e706a41b2f0b883b81493b">gjson::JSONString::Null</a></div><div class="ttdeci">void Null()</div><div class="ttdoc">Set data string to JSON literal null.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:426</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_element_htm"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_element.htm">gjson::JSONElement</a></div><div class="ttdoc">A class representing a basic JSON in-memory element.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:20</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_element_htm_ac74c4cecb610c68ff4c349c79e3423e5"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_element.htm#ac74c4cecb610c68ff4c349c79e3423e5">gjson::JSONElement::JSONElement</a></div><div class="ttdeci">JSONElement(JSONElement *e=NULL)</div><div class="ttdoc">Constructor, make stable instance.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:40</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_element_htm_acc3d5141543f190a30c74f780874e5cf"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">gjson::JSONElement::Type</a></div><div class="ttdeci">TYPE Type()</div><div class="ttdoc">Get JSON element type.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:77</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_a0ca9873f1df6ebd2e9eb84dad783300a"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#a0ca9873f1df6ebd2e9eb84dad783300a">gjson::JSONSupport::IsDecimal</a></div><div class="ttdeci">static bool IsDecimal(const char *s, const uint16_t l, const bool allow_exponent=true)</div><div class="ttdoc">Query is string numeric decimal with optional exponent check.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:158</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_element_htm_a2ab1dc9f4ba28df4717e446c4b04de13"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_element.htm#a2ab1dc9f4ba28df4717e446c4b04de13">gjson::JSONElement::type_</a></div><div class="ttdeci">uint8_t type_</div><div class="ttdoc">Element type.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:95</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_afe2d2eeff6e2299521f0431b5e2f10aa"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#afe2d2eeff6e2299521f0431b5e2f10aa">gjson::JSONString::operator==</a></div><div class="ttdeci">bool operator==(const JSONString&lt; LENGTH &gt; &amp;rhs) const</div><div class="ttdoc">Equals comparison operator, check string against given subject (case sensitive)</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:515</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_ad969b7d7e6e9de05ee7f639ce2e061e8"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#ad969b7d7e6e9de05ee7f639ce2e061e8">gjson::JSONString::JSONString</a></div><div class="ttdeci">JSONString(const T d, const char *format, const bool is_value=true, const bool prefer_literal=true)</div><div class="ttdoc">Constructor, make stable instance with given type and sprint format string.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:190</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_aa51515cca0fb7fadfd3204acac180273"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#aa51515cca0fb7fadfd3204acac180273">gjson::JSONString::IsHex</a></div><div class="ttdeci">bool IsHex(const bool prefix_0x=true) const</div><div class="ttdoc">Query string value is hexadecimal.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:503</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a4c3283b9cf0f4c4bdf3543469e7a4f94"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a4c3283b9cf0f4c4bdf3543469e7a4f94">gjson::JSONString::IsValueLiteral</a></div><div class="ttdeci">bool IsValueLiteral() const</div><div class="ttdoc">Query string data value, is JSON literal.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:400</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a7ef807de20090e57d9c735f1eeb0fad8"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a7ef807de20090e57d9c735f1eeb0fad8">gjson::JSONString::JSONString</a></div><div class="ttdeci">JSONString(const char *s, uint16_t l, JSONElement&lt; LENGTH &gt; *e, const bool is_value=true, const bool is_literal=false)</div><div class="ttdoc">Constructor, make stable instance with given NULL terminated string, string length,...</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:171</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="gjson__elements_8h.htm">gjson_elements.h</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 19:32:36 for ArduinoGJSON by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
