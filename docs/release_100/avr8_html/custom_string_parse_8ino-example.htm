<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGJSON: custom_string_parse.ino</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGJSON
   &#160;<span id="projectnumber">release_100-62c2232 (git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing and building JSON, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('custom_string_parse_8ino-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">custom_string_parse.ino</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * Example use of GJSON (embedded portable JSON library) - In this example a JSON string on stack is parsed by a   </span></div>
<div class="line"><span class="comment"> * custom JSON parser.  No object chain is generated, instead the callback interface is employed as part of </span></div>
<div class="line"><span class="comment"> * parsing and various strings are output over Arduino debug serial.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Expected serial output (Arduino/Genuino Uno):</span></div>
<div class="line"><span class="comment"> * setup()</span></div>
<div class="line"><span class="comment"> * [</span></div>
<div class="line"><span class="comment"> * {</span></div>
<div class="line"><span class="comment"> * Prop(a)</span></div>
<div class="line"><span class="comment"> * [</span></div>
<div class="line"><span class="comment"> * [</span></div>
<div class="line"><span class="comment"> * [</span></div>
<div class="line"><span class="comment"> * Val(b)</span></div>
<div class="line"><span class="comment"> * {</span></div>
<div class="line"><span class="comment"> * Prop(c)</span></div>
<div class="line"><span class="comment"> * Val(d)</span></div>
<div class="line"><span class="comment"> * }</span></div>
<div class="line"><span class="comment"> * ]</span></div>
<div class="line"><span class="comment"> * ]</span></div>
<div class="line"><span class="comment"> * ]</span></div>
<div class="line"><span class="comment"> * }</span></div>
<div class="line"><span class="comment"> * ]</span></div>
<div class="line"><span class="comment"> * Done</span></div>
<div class="line"><span class="comment"> * </span></div>
<div class="line"><span class="comment"> * DG, 2019</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Include</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="gjson_8h.htm">gjson.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="keyword">using namespace </span>gjson;</div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">/*! \cond PRIVATE */</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if defined(GJSON_PACKING)</span></div>
<div class="line"><span class="preprocessor">#pragma pack(push, GJSON_PACKING)</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * JSON non-recursive simple string parser by subclass example using no buffering.  Parse user supplied string with callbacks</span></div>
<div class="line"><span class="comment"> * where user can dictate what is done with parsed data, here it is simply written to Arduino debug Serial and there is no </span></div>
<div class="line"><span class="comment"> * I/O because in this example no string is created + the user JSON string is passed by parameter.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * \tparam LENGTH Maximum length (including NULL terminator) in characters of a string attribute/property</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t LENGTH&gt;</div>
<div class="line"><span class="keyword">class </span>JSONCustomStringParse : <span class="keyword">protected</span> <a name="_a0"></a><a class="code" href="classgjson_1_1_j_s_o_n_parse.htm">JSONParse</a>&lt;LENGTH, 0&gt; {</div>
<div class="line"><span class="keyword">public</span>:</div>
<div class="line">    <span class="keyword">using</span> <a class="code" href="classgjson_1_1_j_s_o_n_parse.htm">JSONParse&lt;LENGTH, 0&gt;::ERR</a>;</div>
<div class="line">    <span class="keyword">using</span> <a class="code" href="classgjson_1_1_j_s_o_n_parse.htm">JSONParse&lt;LENGTH, 0&gt;::GetLastError</a>;</div>
<div class="line">    <span class="keyword">using</span> <a class="code" href="classgjson_1_1_j_s_o_n_parse.htm">JSONParse&lt;LENGTH, 0&gt;::LimitNodeLevel</a>;</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="comment">/*</span></div>
<div class="line"><span class="comment">     * Default constructor, make stable instance.  Setup NULL I/O, base parser and enable callbacks</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    JSONCustomStringParse() : jio_(), <a class="code" href="classgjson_1_1_j_s_o_n_parse.htm">JSONParse&lt;LENGTH, 0&gt;</a>(&amp;jio_, 0U) {</div>
<div class="line">        <a name="a1"></a><a class="code" href="classgjson_1_1_j_s_o_n_parse.htm#ad923f7f75556375c7a9b19fbd6540c45">JSONParse&lt;LENGTH, 0&gt;::Callbacks</a>(<span class="keyword">true</span>);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="comment">/*</span></div>
<div class="line"><span class="comment">     * JSON Parse user supplied string</span></div>
<div class="line"><span class="comment">     *</span></div>
<div class="line"><span class="comment">     * \attention Caller should check /ref GetLastError upon completion for any error</span></div>
<div class="line"><span class="comment">     * condition that may have risen during parse</span></div>
<div class="line"><span class="comment">     *</span></div>
<div class="line"><span class="comment">     * \note If JSON string part way through then node alignments will not be met, i.e.</span></div>
<div class="line"><span class="comment">     * there maybe more Array or Map closes than opens.  In this situation caller should </span></div>
<div class="line"><span class="comment">     * disable via /ref LimitNodeLevel</span></div>
<div class="line"><span class="comment">     *</span></div>
<div class="line"><span class="comment">     * param[in] s JSON NULL terminated string</span></div>
<div class="line"><span class="comment">     * \return Last character index parsed.  Debug aid upon error conditions</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    uint16_t FromString(<span class="keywordtype">char</span> *s) {</div>
<div class="line">        <span class="keywordflow">return</span> <a name="a2"></a><a class="code" href="classgjson_1_1_j_s_o_n_parse.htm#abc670f2ed5e813460c299da727c4791c">JSONParse&lt;LENGTH, 0&gt;::FromString</a>(s, NULL);</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="comment">/*</span></div>
<div class="line"><span class="comment">     * See JSONTokenizer::TokenArray.  Here we simply output strings over Arduino UART</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    <span class="keywordtype">bool</span> TokenArray(<span class="keyword">const</span> <a name="_a3"></a><a class="code" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray&lt;LENGTH&gt;</a>* e, <span class="keywordtype">char</span> *s=NULL, uint16_t i=0) {</div>
<div class="line">        <span class="comment">// String parsing?</span></div>
<div class="line">        <span class="keywordflow">if</span> (<a name="a4"></a><a class="code" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41cae2c2d8b6177b65991d6295b21c1e465f">JSONConstant::OP_FROM_STRING</a> == <a class="code" href="classgjson_1_1_j_s_o_n_parse.htm">JSONParse&lt;LENGTH, 0&gt;::GetLastOperation</a>()) {</div>
<div class="line">            <span class="keywordflow">if</span> (e-&gt;<a name="a5"></a><a class="code" href="classgjson_1_1_j_s_o_n_array.htm#a4b40f47562c0f15f0e813c09badc569b">IsOpen</a>()) {</div>
<div class="line">                Serial.println(<span class="stringliteral">&quot;[&quot;</span>);</div>
<div class="line">            }<span class="keywordflow">else</span> {</div>
<div class="line">                Serial.println(<span class="stringliteral">&quot;]&quot;</span>);</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="comment">/*</span></div>
<div class="line"><span class="comment">     * \copydoc JSONTokenizer::TokenMap.  Here we simply output strings over Arduino UART</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    <span class="keywordtype">bool</span> TokenMap(<span class="keyword">const</span> <a class="code" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray&lt;LENGTH&gt;</a>* e, <span class="keywordtype">char</span> *s=NULL, uint16_t i=0) {</div>
<div class="line">        <span class="comment">// String parsing?</span></div>
<div class="line">        <span class="keywordflow">if</span> (<a class="code" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41cae2c2d8b6177b65991d6295b21c1e465f">JSONConstant::OP_FROM_STRING</a> == <a class="code" href="classgjson_1_1_j_s_o_n_parse.htm">JSONParse&lt;LENGTH, 0&gt;::GetLastOperation</a>()) {</div>
<div class="line">            <span class="keywordflow">if</span> (e-&gt;<a class="code" href="classgjson_1_1_j_s_o_n_array.htm#a4b40f47562c0f15f0e813c09badc569b">IsOpen</a>()) {</div>
<div class="line">                Serial.println(<span class="stringliteral">&quot;{&quot;</span>);</div>
<div class="line">            }<span class="keywordflow">else</span> {</div>
<div class="line">                Serial.println(<span class="stringliteral">&quot;}&quot;</span>);</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line">    <span class="comment">/*</span></div>
<div class="line"><span class="comment">     * \copydoc JSONTokenizer::TokenString.  Here we simply output strings over Arduino UART</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    <span class="keywordtype">bool</span> TokenString(<span class="keyword">const</span> <a name="_a6"></a><a class="code" href="classgjson_1_1_j_s_o_n_string.htm">JSONString&lt;LENGTH&gt;</a>* e, <span class="keywordtype">char</span> *s=NULL, int16_t si=0, int16_t ei=0) {</div>
<div class="line">        <span class="comment">// String parsing?</span></div>
<div class="line">        <span class="keywordflow">if</span> (<a class="code" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41cae2c2d8b6177b65991d6295b21c1e465f">JSONConstant::OP_FROM_STRING</a> == <a class="code" href="classgjson_1_1_j_s_o_n_parse.htm">JSONParse&lt;LENGTH, 0&gt;::GetLastOperation</a>()) {</div>
<div class="line">            <span class="keywordflow">if</span> (e-&gt;<a name="a7"></a><a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ae9cf11bdbf0bd7694e9777d36ced8340">IsValue</a>()) {</div>
<div class="line">                <span class="keywordflow">if</span> (e-&gt;<a name="a8"></a><a class="code" href="classgjson_1_1_j_s_o_n_string.htm#a4c3283b9cf0f4c4bdf3543469e7a4f94">IsValueLiteral</a>()) {</div>
<div class="line">                    Serial.print(<span class="stringliteral">&quot;LVal(&quot;</span>);</div>
<div class="line">                    Serial.print(e-&gt;<a name="a9"></a><a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ae6299dec62ffdc27b5f3e7124fef740b">Data</a>());</div>
<div class="line">                    Serial.println(<span class="stringliteral">&quot;)&quot;</span>);</div>
<div class="line">                }<span class="keywordflow">else</span> {</div>
<div class="line">                    Serial.print(<span class="stringliteral">&quot;Val(&quot;</span>);</div>
<div class="line">                    Serial.print(e-&gt;<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ae6299dec62ffdc27b5f3e7124fef740b">Data</a>());</div>
<div class="line">                    Serial.println(<span class="stringliteral">&quot;)&quot;</span>);</div>
<div class="line">                }</div>
<div class="line">            }<span class="keywordflow">else</span> {</div>
<div class="line">                Serial.print(<span class="stringliteral">&quot;Prop(&quot;</span>);</div>
<div class="line">                Serial.print(e-&gt;<a class="code" href="classgjson_1_1_j_s_o_n_string.htm#ae6299dec62ffdc27b5f3e7124fef740b">Data</a>());</div>
<div class="line">                Serial.println(<span class="stringliteral">&quot;)&quot;</span>);</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line"><span class="keyword">protected</span>:</div>
<div class="line">    <a name="_a10"></a><a class="code" href="classgjson_1_1_null_buffer.htm">NullBuffer</a>    jio_;</div>
<div class="line">}; <span class="comment">// class JSONCustomStringParse</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if defined(GJSON_PACKING)</span></div>
<div class="line"><span class="preprocessor">#pragma pack(pop)</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">/*! \endcond */</span></div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> setup() {</div>
<div class="line">    Serial.begin(9600);</div>
<div class="line">    <span class="keywordflow">while</span>(!Serial) { }</div>
<div class="line"> </div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;setup()&quot;</span>);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordtype">char</span> js[] = <span class="stringliteral">&quot;[ { \&quot;a\&quot;:[ [ [ \&quot;b\&quot;, { \&quot;c\&quot;:\&quot;d\&quot; } ] ] ] } ]&quot;</span>;</div>
<div class="line">    </div>
<div class="line">    <span class="comment">// Expected parsed output would be something like:</span></div>
<div class="line">    <span class="comment">// Array(o) &gt;</span></div>
<div class="line">    <span class="comment">// Map(o) &gt;</span></div>
<div class="line">    <span class="comment">// String(&quot;a&quot;) &gt; Array(o) &gt;</span></div>
<div class="line">    <span class="comment">// Array(o) &gt;</span></div>
<div class="line">    <span class="comment">// Array(o) &gt;</span></div>
<div class="line">    <span class="comment">// String(&quot;b&quot;) &gt;</span></div>
<div class="line">    <span class="comment">// Map(o) &gt;</span></div>
<div class="line">    <span class="comment">// String(&quot;c&quot;) &gt; String(&quot;d&quot;) &gt;</span></div>
<div class="line">    <span class="comment">// Map(c)</span></div>
<div class="line">    <span class="comment">// Array(c)</span></div>
<div class="line">    <span class="comment">// Array(c)</span></div>
<div class="line">    <span class="comment">// Array(&quot;a&quot;, c)</span></div>
<div class="line">    <span class="comment">// Map(c)</span></div>
<div class="line">    <span class="comment">// Array(c)</span></div>
<div class="line"> </div>
<div class="line">    JSONCustomStringParse&lt;5&gt; cpr;</div>
<div class="line">    uint16_t fci = cpr.FromString(js);</div>
<div class="line">    <span class="keywordflow">if</span> (cpr.GetLastError() != JSONConstant::ERR_NONE) {</div>
<div class="line">        Serial.print(<span class="stringliteral">&quot;Last error: &quot;</span>);</div>
<div class="line">        Serial.print(cpr.GetLastError());</div>
<div class="line">        Serial.print(<span class="stringliteral">&quot; at character &quot;</span>);</div>
<div class="line">        Serial.println(fci);</div>
<div class="line">        <span class="keywordflow">return</span>;</div>
<div class="line">    }</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;Done&quot;</span>);</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> loop() {</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassgjson_1_1_null_buffer_htm"><div class="ttname"><a href="classgjson_1_1_null_buffer.htm">gjson::NullBuffer</a></div><div class="ttdoc">An class for a NULL buffer when JSON parsing.</div><div class="ttdef"><b>Definition:</b> gjson_io_buffer.h:108</div></div>
<div class="ttc" id="agjson_8h_htm"><div class="ttname"><a href="gjson_8h.htm">gjson.h</a></div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_array_htm"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_array.htm">gjson::JSONArray</a></div><div class="ttdoc">A class representing a JSON in-memory array element.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:582</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_array_htm_a4b40f47562c0f15f0e813c09badc569b"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_array.htm#a4b40f47562c0f15f0e813c09badc569b">gjson::JSONArray::IsOpen</a></div><div class="ttdeci">bool IsOpen() const</div><div class="ttdoc">Query isOpen property of array element.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:612</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_parse_htm"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a></div><div class="ttdoc">JSON base non-recursive parser offering string parsing using user supplied I/O.</div><div class="ttdef"><b>Definition:</b> gjson_parser.h:154</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_ae6299dec62ffdc27b5f3e7124fef740b"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#ae6299dec62ffdc27b5f3e7124fef740b">gjson::JSONString::Data</a></div><div class="ttdeci">bool Data(const DT d, const char *format, const bool prefer_literal=true, const bool allow_exponent=GJSON_DEFAULT_EXPONENTIAL_NOTATION)</div><div class="ttdoc">Convert integer type to data string.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:259</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_ae9cf11bdbf0bd7694e9777d36ced8340"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#ae9cf11bdbf0bd7694e9777d36ced8340">gjson::JSONString::IsValue</a></div><div class="ttdeci">bool IsValue() const</div><div class="ttdoc">Query is string data a value or property/attribute.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:377</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_parse_htm_abc670f2ed5e813460c299da727c4791c"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_parse.htm#abc670f2ed5e813460c299da727c4791c">gjson::JSONParse::FromString</a></div><div class="ttdeci">uint16_t FromString(const uint16_t psi=0, JSONElement&lt; LENGTH &gt; **h=NULL)</div><div class="ttdoc">Parse JSON string stored in I/O object, optionally build JSON object chain.</div><div class="ttdef"><b>Definition:</b> gjson_parser.h:208</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString&lt; LENGTH &gt;</a></div></div>
<div class="ttc" id="astructgjson_1_1_j_s_o_n_constant_htm_a60c2523719bda53203aed8241303e41cae2c2d8b6177b65991d6295b21c1e465f"><div class="ttname"><a href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41cae2c2d8b6177b65991d6295b21c1e465f">gjson::JSONConstant::OP_FROM_STRING</a></div><div class="ttdeci">@ OP_FROM_STRING</div><div class="ttdoc">Operation none.</div><div class="ttdef"><b>Definition:</b> gjson_parser.h:40</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_string_htm_a4c3283b9cf0f4c4bdf3543469e7a4f94"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_string.htm#a4c3283b9cf0f4c4bdf3543469e7a4f94">gjson::JSONString::IsValueLiteral</a></div><div class="ttdeci">bool IsValueLiteral() const</div><div class="ttdoc">Query string data value, is JSON literal.</div><div class="ttdef"><b>Definition:</b> gjson_elements.h:400</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_parse_htm_ad923f7f75556375c7a9b19fbd6540c45"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_parse.htm#ad923f7f75556375c7a9b19fbd6540c45">gjson::JSONParse::Callbacks</a></div><div class="ttdeci">bool Callbacks()</div><div class="ttdoc">Get Callbacks flag indicating use of callbacks.</div><div class="ttdef"><b>Definition:</b> gjson_parser.h:1092</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Mon Jan 1 2024 19:39:01 for ArduinoGJSON by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
