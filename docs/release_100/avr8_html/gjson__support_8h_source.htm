<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGJSON: gjson_support.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGJSON
   &#160;<span id="projectnumber">release_100-62c2232 (git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing and building JSON, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('gjson__support_8h_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gjson_support.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gjson__support_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * \file</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * Embedded JSON builder and parser - Support</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * PROJECT: GJSON library</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * TARGET SYSTEM: Arduino, STM32, Atmel AT91SAM, portable</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef GJSON_SUPPORT_H</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define GJSON_SUPPORT_H</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">namespace </span>gjson {</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * JSON support methods, mostly reusable string helpers</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_support.htm">   16</a></span>&#160;<span class="keyword">class </span><a class="code" href="classgjson_1_1_j_s_o_n_support.htm">JSONSupport</a> {</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">     * Query is string a JSON literal null</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">     * \param[in] s Pointer, null terminated check string</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">     * \param[in] l Length (characters) not including null</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">     * \return String query result</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_support.htm#a4b57f4c7a5872e11958400c7d45991ba">   25</a></span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a4b57f4c7a5872e11958400c7d45991ba">IsNull</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s, <span class="keyword">const</span> uint16_t l) {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keywordtype">bool</span> b = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keywordflow">if</span> ((4 == l) &amp;&amp; !<a class="code" href="classgjson_1_1_j_s_o_n_support.htm#ac8df4eb100877f83f5264ec8df7c5456">JSONSupport::StrNCmp</a>(s, <span class="stringliteral">&quot;null&quot;</span>, 4)) {</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            b = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        }</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordflow">return</span> b;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    }</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">     * Query is string a JSON literal boolean</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">     * \param[in] s Pointer, null terminated check string</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">     * \param[in] l Length (characters) not including null</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">     * \return String query result</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_support.htm#a1af36d14f15f04901d5a73bad95dea53">   43</a></span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a1af36d14f15f04901d5a73bad95dea53">IsBoolean</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s, <span class="keyword">const</span> uint16_t l) {</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordtype">bool</span> b = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">if</span> ((4 == l) &amp;&amp; !<a class="code" href="classgjson_1_1_j_s_o_n_support.htm#ac8df4eb100877f83f5264ec8df7c5456">JSONSupport::StrNCmp</a>(s, <span class="stringliteral">&quot;true&quot;</span>, 4)) {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            b = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        }<span class="keywordflow">else</span> <span class="keywordflow">if</span> ((5 == l) &amp;&amp; !<a class="code" href="classgjson_1_1_j_s_o_n_support.htm#ac8df4eb100877f83f5264ec8df7c5456">JSONSupport::StrNCmp</a>(s, <span class="stringliteral">&quot;false&quot;</span>, 5)) {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            b = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        }</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">return</span> b;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">     * Query is string numeric integer with optional leading zero control</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     * IsInt(&quot;00.12&quot;)      = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     * IsInt(&quot;-00.12&quot;)     = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     * IsInt(&quot;-012&quot;)       = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">     * IsInt(&quot;-00&quot;)        = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">     * IsInt(&quot;0.0&quot;)        = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     * IsInt(&quot;-0.0&quot;)       = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     * IsInt(&quot;0.1234&quot;)     = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     * IsInt(&quot;1.455&quot;)      = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     * IsInt(&quot;3455.455&quot;)   = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     * IsInt(&quot;-0.1234&quot;)    = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     * IsInt(&quot;-1.455&quot;)     = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     * IsInt(&quot;-3455.455&quot;)  = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     * IsInt(&quot;-1.2&quot;)       = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     * IsInt(&quot;-012000009&quot;) = 0,   IsInt(..., true)    = 0</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     * IsInt(&quot;000455&quot;)     = 0,   IsInt(..., true)    = 1</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     * IsInt(&quot;00&quot;)         = 0,   IsInt(..., true)    = 1</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     * IsInt(&quot;00000&quot;)      = 0,   IsInt(..., true)    = 1</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     * IsInt(&quot;000001&quot;)     = 0,   IsInt(..., true)    = 1</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     * IsInt(&quot;100000&quot;)     = 1,   IsInt(..., true)    = 1</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     * IsInt(&quot;0&quot;)          = 1,   IsInt(..., true)    = 1</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">     * IsInt(&quot;-0&quot;)         = 1,   IsInt(..., true)    = 1</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">     * IsInt(&quot;-12000000&quot;)  = 1,   IsInt(..., true)    = 1</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     * IsInt(&quot;-12000009&quot;)  = 1,   IsInt(..., true)    = 1</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">     * \param[in] s Pointer, null terminated check string</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">     * \param[in] l Length (characters) not including null</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">     * \param[in] allow_leading Leading zero check control flag, default false(not allowed)</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">     * \return String query result</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_support.htm#ada99703626a311f7c9cc1b6d2e140519">   88</a></span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#ada99703626a311f7c9cc1b6d2e140519">IsInt</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s, <span class="keyword">const</span> uint16_t l, <span class="keywordtype">bool</span> allow_leading=<span class="keyword">false</span>) {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordtype">bool</span> f = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        uint16_t    st = 0;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">if</span> (l&gt;1 &amp;&amp; (s[0]==<span class="charliteral">&#39;-&#39;</span>)) {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            st++;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            allow_leading = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">for</span>(uint16_t i=st; i&lt;l; i++) {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">if</span> (s[i]&gt;=<span class="charliteral">&#39;0&#39;</span> &amp;&amp; s[i]&lt;=<span class="charliteral">&#39;9&#39;</span>) {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordflow">if</span> (!allow_leading &amp;&amp; i==st &amp;&amp; <span class="charliteral">&#39;0&#39;</span>==s[i] &amp;&amp; l&gt;(1+st)) {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="comment">// leading zero</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    f = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                f = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">return</span> f;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    } <span class="comment">// IsInt(...)</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">     * Query is string numeric decimal with optional exponent check</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">     * IsDecimal(&quot;1.e-10&quot;,...)       = 0,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">     * IsDecimal(&quot;01.0e-10&quot;,...)     = 0,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">     * IsDecimal(&quot;0.000000e&quot;,...)    = 0,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">     * IsDecimal(&quot;1.0e-&quot;,...)        = 0,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">     * IsDecimal(&quot;1.0e+&quot;,...)        = 0,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">     * IsDecimal(&quot;1e10&quot;,...)         = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">     * IsDecimal(&quot;0.000000e0&quot;,...)   = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">     * IsDecimal(&quot;-0.000000e-0&quot;,...) = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">     * IsDecimal(&quot;1.0e-10&quot;,...)      = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">     * IsDecimal(&quot;1.0e+10&quot;,...)      = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">     * IsDecimal(&quot;1.0e0&quot;,...)        = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">     * IsDecimal(&quot;1.0e+0&quot;,...)       = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">     * IsDecimal(&quot;0.0e-1&quot;,...)       = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">     * IsDecimal(&quot;0.0e+1&quot;,...)       = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">     * IsDecimal(&quot;0.0e0&quot;,...)        = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     * IsDecimal(&quot;0.0e+0&quot;,...)       = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     * IsDecimal(&quot;0.1e345&quot;,...)      = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     * IsDecimal(&quot;0.1e+345&quot;,...)     = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     * IsDecimal(&quot;0.1e-345&quot;,...)     = 1,  IsDecimal(...,false) = 0</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">     * IsDecimal(&quot;0&quot;,...)            = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">     * IsDecimal(&quot;-0&quot;,...)           = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">     * IsDecimal(&quot;0.0&quot;,...)          = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">     * IsDecimal(&quot;-0.0&quot;,...)         = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     * IsDecimal(&quot;0.1234&quot;,...)       = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     * IsDecimal(&quot;-0.1234&quot;,...)      = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     * IsDecimal(&quot;1.455&quot;,...)        = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">     * IsDecimal(&quot;-1.455&quot;,...)       = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">     * IsDecimal(&quot;3455.455&quot;,...)     = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">     * IsDecimal(&quot;-3455.455&quot;,...)    = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">     * IsDecimal(&quot;3455&quot;,...)         = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     * IsDecimal(&quot;-3455&quot;,...)        = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     * IsDecimal(&quot;-1.2&quot;,...)         = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     * IsDecimal(&quot;1.2&quot;,...)          = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     * IsDecimal(&quot;-0.012&quot;,...)       = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     * IsDecimal(&quot;-0.000000&quot;,...)    = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     * IsDecimal(&quot;0.000000&quot;,...)     = 1,  IsDecimal(...,false) = 1</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     * \param[in] s Pointer, null terminated check string</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     * \param[in] l Length (characters) not including null</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     * \param[in] allow_exponent Exponent check control flag, default true(allow)</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     * \return String query result</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_support.htm#a0ca9873f1df6ebd2e9eb84dad783300a">  158</a></span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a0ca9873f1df6ebd2e9eb84dad783300a">IsDecimal</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s, <span class="keyword">const</span> uint16_t l, <span class="keyword">const</span> <span class="keywordtype">bool</span> allow_exponent=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordtype">bool</span>        f = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordtype">bool</span>        en = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordtype">bool</span>        dpnl = <span class="keyword">false</span>, dpnr = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        uint16_t    st = 0, e = 0;    <span class="comment">// e cannot be 0 if present</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        uint16_t    dp = 0;            <span class="comment">// dp cannot be 0 if present</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="comment">// format: [s]&lt;n&gt;[[dp]&lt;N&gt;][[e|E][S]&lt;n&gt;]</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment">//        s   = sign(-)</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="comment">//        S   = sign(+|-)</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="comment">//        n   = integer no leading zeros</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">//        N   = integer with optional leading zeros</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="comment">//        dp  = decimal point</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="comment">//        e|E = exponent &#39;e&#39;</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">if</span> (l&gt;1 &amp;&amp; (s[0]==<span class="charliteral">&#39;-&#39;</span>)) {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            st++;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">for</span>(uint16_t i=st; i&lt;l; i++) {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordflow">if</span> (!e) {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <span class="keywordflow">if</span> (s[i]&gt;=<span class="charliteral">&#39;0&#39;</span> &amp;&amp; s[i]&lt;=<span class="charliteral">&#39;9&#39;</span>) {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    <span class="keywordflow">if</span> (!dp &amp;&amp; i&gt;st &amp;&amp; <span class="charliteral">&#39;0&#39;</span>==s[st]) {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        <span class="comment">// leading zero</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        f = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="keywordflow">if</span> (!dp) {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        dpnl = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                        dpnr = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    <span class="keywordflow">if</span> ((<span class="charliteral">&#39;.&#39;</span> == s[i]) &amp;&amp; !dp) {</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        dp = i;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    }<span class="keywordflow">else</span> <span class="keywordflow">if</span> ((<span class="charliteral">&#39;E&#39;</span> == (s[i] &amp; 223)) &amp;&amp; ((dp==0 &amp;&amp; dpnl) || (dp&gt;0 &amp;&amp; dpnr))) {   <span class="comment">// nEn or n.nEn</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                        e = i;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                        f = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keywordflow">if</span> (s[i]&gt;=<span class="charliteral">&#39;0&#39;</span> &amp;&amp; s[i]&lt;=<span class="charliteral">&#39;9&#39;</span>) {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    en=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (<span class="charliteral">&#39;-&#39;</span> == s[i] &amp;&amp; i==(e+1)) {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (<span class="charliteral">&#39;+&#39;</span> == s[i] &amp;&amp; i==(e+1)) {</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    f = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">if</span> (allow_exponent) {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keywordflow">if</span> (e &amp;&amp; !en) {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                f = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">if</span> (e) {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                f = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">return</span> f;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    } <span class="comment">// IsDecimal()</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">     * Query is string numeric hexadecimal with optional inclusion of prefix</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">     * IsHex(&quot;Hello&quot;)      = 0,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">     * IsHex(&quot;true&quot;)       = 0,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">     * IsHex(&quot;false&quot;)      = 0,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">     * IsHex(&quot;1.456&quot;)      = 0,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">     * IsHex(&quot;-4.991&quot;)     = 0,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">     * IsHex(&quot;-3456&quot;)      = 0,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">     * IsHex(&quot;-04544&quot;)     = 0,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">     * IsHex(&quot;0x23j330&quot;)   = 0,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">     * IsHex(&quot;-00&quot;)        = 0,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">     * IsHex(&quot;-0&quot;)         = 0,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">     * IsHex(&quot;-12000000&quot;)  = 0,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">     * IsHex(&quot;0x000000e&quot;)  = 1,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">     * IsHex(&quot;0x002344ff&quot;) = 1,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">     * IsHex(&quot;0xab203efe&quot;) = 1,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">     * IsHex(&quot;0xdeadbeef&quot;) = 1,    IsHex(..., false)  = 0</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">     * IsHex(&quot;fffffff&quot;)    = 0,    IsHex(..., false)  = 1</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">     * IsHex(&quot;000000e&quot;)    = 0,    IsHex(..., false)  = 1</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">     * IsHex(&quot;9345&quot;)       = 0,    IsHex(..., false)  = 1</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">     * IsHex(&quot;000455&quot;)     = 0,    IsHex(..., false)  = 1</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">     * IsHex(&quot;100000&quot;)     = 0,    IsHex(..., false)  = 1</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">     * IsHex(&quot;00&quot;)         = 0,    IsHex(..., false)  = 1</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">     * IsHex(&quot;00000&quot;)      = 0,    IsHex(..., false)  = 1</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">     * IsHex(&quot;000001&quot;)     = 0,    IsHex(..., false)  = 1</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">     * IsHex(&quot;cafe&quot;)       = 0,    IsHex(..., false)  = 1</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">     * IsHex(&quot;0&quot;)          = 0,    IsHex(..., false)  = 1</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">     * \param[in] s Pointer, null terminated check string</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">     * \param[in] l Length (characters) not including null</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">     * \param[in] prefix_0x Prefix check control flag, default true(allow &quot;0x&quot; as prefix)</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">     * \return String query result</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00257"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_support.htm#aff8020bb3920a3d2df1376981b8d898a">  257</a></span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#aff8020bb3920a3d2df1376981b8d898a">IsHex</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s, <span class="keyword">const</span> uint16_t l, <span class="keyword">const</span> <span class="keywordtype">bool</span> prefix_0x=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordtype">bool</span> f = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        uint16_t st = 0;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">if</span> (prefix_0x) {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <span class="keywordflow">if</span> (l&gt;2 &amp;&amp; s[0] == <span class="charliteral">&#39;0&#39;</span> &amp;&amp; s[1] == <span class="charliteral">&#39;x&#39;</span>) {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                st = 2;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                f = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            }</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keywordflow">if</span> (f) {</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordflow">for</span>(uint16_t i=st; i&lt;l; i++) {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <span class="keywordflow">if</span> ((s[i]&gt;=<span class="charliteral">&#39;0&#39;</span> &amp;&amp; s[i]&lt;=<span class="charliteral">&#39;9&#39;</span>) || (s[i]&gt;=<span class="charliteral">&#39;A&#39;</span> &amp;&amp; s[i]&lt;=<span class="charliteral">&#39;F&#39;</span>)  || (s[i]&gt;=<span class="charliteral">&#39;a&#39;</span> &amp;&amp; s[i]&lt;=<span class="charliteral">&#39;f&#39;</span>)) {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    f = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            }</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span> f;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    } <span class="comment">// IsHex(...)</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">     * Query is string JSON literal with optional exponent check.  Used during parsing to ensure </span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">     * value data is correctly represented as literals.</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">     * \param[in] s Pointer, null terminated check string</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">     * \param[in] l Length (characters) not including null</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">     * \param[in] allow_exponent Exponent check control flag, default true(allow)</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">     * \return String query result</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_support.htm#a7e8f596709abf719e0e3ba6664e0e048">  291</a></span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a7e8f596709abf719e0e3ba6664e0e048">IsLiteral</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s, <span class="keyword">const</span> uint16_t l, <span class="keyword">const</span> <span class="keywordtype">bool</span> allow_exponent=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keywordtype">bool</span> li = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a4b57f4c7a5872e11958400c7d45991ba">IsNull</a>(s,l) || <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a1af36d14f15f04901d5a73bad95dea53">IsBoolean</a>(s,l) || <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a0ca9873f1df6ebd2e9eb84dad783300a">IsDecimal</a>(s,l,allow_exponent)) {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            li = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        }</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">return</span> li;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    } <span class="comment">// IsLiteral(...)</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">     * Query is string JSON literal decimal with exponent specified</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">     * \param[in] s Pointer, null terminated check string</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">     * \param[in] l Length (characters) not including null</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">     * \return String query result</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_support.htm#ad9fffbe316b3208544297936b54d46e0">  309</a></span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#ad9fffbe316b3208544297936b54d46e0">HasLiteralExponent</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* s, uint16_t l) {</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keywordtype">bool</span> he = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        uint16_t i;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="comment">// &lt;s&gt;&lt;n&gt;[dp][e&lt;S&gt;&lt;n&gt;]</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="comment">//           /|\</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">        //            Exponent</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a0ca9873f1df6ebd2e9eb84dad783300a">JSONSupport::IsDecimal</a>(s, l)) {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">for</span>(i=0; i&lt;l; i++) {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                <span class="keywordflow">if</span> (<span class="charliteral">&#39;e&#39;</span> == s[i]) {</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                    he = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordflow">return</span> he;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    } <span class="comment">// HasLiteralExponent(...)</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">     * Character string d contains substring between given character indexes that should be replaced</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">     * by a null terminated string.</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">     * \param[in] d Pointer, destination null terminated string</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">     * \param[in] d_length Actual length of destination string</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">     * \param[in] d_max Maximum possible length including null terminator of destination string</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">     * \param[in] sp Start position or character index into destionation string for replace</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">     * \param[in] ep End position or character index into destionation string for replace</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">     * \param[in] s Pointer, null terminated replacement string</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">     * \param[in] sl Length (characters) of replacement string not including null</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">     * \return New destination length (characters).  An update of d_length</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00342"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_support.htm#a5816c27ff0245054476d51addcbc68ad">  342</a></span>&#160;    <span class="keyword">static</span> uint16_t <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#a5816c27ff0245054476d51addcbc68ad">Replace</a>(<span class="keywordtype">char</span> *d, uint16_t d_length, uint16_t d_max, int16_t sp, int16_t ep, <span class="keyword">const</span> <span class="keywordtype">char</span>* s, uint16_t sl) {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        uint16_t dl = ep - sp;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        uint16_t diff;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="comment">// Valid start + end points?</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keywordflow">if</span> (sp&gt;=0 &amp;&amp; ep&gt;=0 &amp;&amp; sp&lt;d_length &amp;&amp; ep&lt;=d_length) {</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <span class="comment">// Destination space same size as source (new string)</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keywordflow">if</span> (dl == sl) {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                memcpy(<span class="keyword">static_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(&amp;d[sp]), s, sl);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            }<span class="keywordflow">else</span> <span class="keywordflow">if</span> (dl&gt;sl) {</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                <span class="comment">// Destination space larger than source (new string)</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                diff = dl - sl;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                memmove(<span class="keyword">static_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(&amp;d[ep - diff]),  <span class="keyword">static_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(&amp;d[ep]), d_length - (ep - diff));</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                d_length -= diff;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                memcpy(<span class="keyword">static_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(&amp;d[sp]), s, sl);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            }<span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                <span class="comment">// Destination space smaller than source (new string)</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                <span class="comment">// Will fit?</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                diff = sl - dl;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                <span class="keywordflow">if</span> (d_max &gt;= (d_length + diff)) {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                    memmove(<span class="keyword">static_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(&amp;d[ep + diff]),  <span class="keyword">static_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(&amp;d[ep]), d_length - (ep - diff));</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                    d_length += diff;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                    memcpy(<span class="keyword">static_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(&amp;d[sp]), s, sl);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                }</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="keywordflow">return</span> d_length;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    } <span class="comment">// Replace(...)</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">    /**</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">     * Alternative from strncmpi and strncmp.  Some standard library implementations don&#39;t include</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">     * \param[in] s1 String, NULL terminated</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">     * \param[in] s2 String, NULL terminated</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">     * \param[in] n Characters (length excluding NULL)</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">     * \param[in] case_sensitive Case sensitive compare flag (default true)</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">     * \return int Difference.  s1 == s2 =&gt; 0, s1 &lt; s2 =&gt; -n, s2 &gt; s2 =&gt; +n</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="classgjson_1_1_j_s_o_n_support.htm#ac8df4eb100877f83f5264ec8df7c5456">  384</a></span>&#160;    <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classgjson_1_1_j_s_o_n_support.htm#ac8df4eb100877f83f5264ec8df7c5456">StrNCmp</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s1, <span class="keyword">const</span> <span class="keywordtype">char</span> *s2, <span class="keyword">const</span> <span class="keywordtype">int</span> n, <span class="keyword">const</span> <span class="keywordtype">bool</span> case_sensitive=<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordtype">int</span> r = 0;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;n; i++) {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            <span class="keywordflow">if</span> ((case_sensitive &amp;&amp; s1[i] != s2[i]) || (!case_sensitive &amp;&amp; (s1[i] &amp; 223) != (s2[i] &amp; 223))) {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                r = -1;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        }</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordflow">if</span> (r==0) {</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            <span class="keywordflow">if</span> ((<span class="keywordtype">int</span>)strlen(s1) &gt; n) {</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                r=1;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;}; <span class="comment">// class JSONSupport</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;}; <span class="comment">// namespace gjson</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160; </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="preprocessor">#endif // GJSON_SUPPORT_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_aff8020bb3920a3d2df1376981b8d898a"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#aff8020bb3920a3d2df1376981b8d898a">gjson::JSONSupport::IsHex</a></div><div class="ttdeci">static bool IsHex(const char *s, const uint16_t l, const bool prefix_0x=true)</div><div class="ttdoc">Query is string numeric hexadecimal with optional inclusion of prefix.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:257</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_ac8df4eb100877f83f5264ec8df7c5456"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#ac8df4eb100877f83f5264ec8df7c5456">gjson::JSONSupport::StrNCmp</a></div><div class="ttdeci">static int StrNCmp(const char *s1, const char *s2, const int n, const bool case_sensitive=true)</div><div class="ttdoc">Alternative from strncmpi and strncmp.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:384</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_ada99703626a311f7c9cc1b6d2e140519"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#ada99703626a311f7c9cc1b6d2e140519">gjson::JSONSupport::IsInt</a></div><div class="ttdeci">static bool IsInt(const char *s, const uint16_t l, bool allow_leading=false)</div><div class="ttdoc">Query is string numeric integer with optional leading zero control.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:88</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_a7e8f596709abf719e0e3ba6664e0e048"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#a7e8f596709abf719e0e3ba6664e0e048">gjson::JSONSupport::IsLiteral</a></div><div class="ttdeci">static bool IsLiteral(const char *s, const uint16_t l, const bool allow_exponent=true)</div><div class="ttdoc">Query is string JSON literal with optional exponent check.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:291</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_a4b57f4c7a5872e11958400c7d45991ba"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#a4b57f4c7a5872e11958400c7d45991ba">gjson::JSONSupport::IsNull</a></div><div class="ttdeci">static bool IsNull(const char *s, const uint16_t l)</div><div class="ttdoc">Query is string a JSON literal null.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:25</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_a1af36d14f15f04901d5a73bad95dea53"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#a1af36d14f15f04901d5a73bad95dea53">gjson::JSONSupport::IsBoolean</a></div><div class="ttdeci">static bool IsBoolean(const char *s, const uint16_t l)</div><div class="ttdoc">Query is string a JSON literal boolean.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:43</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_a5816c27ff0245054476d51addcbc68ad"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#a5816c27ff0245054476d51addcbc68ad">gjson::JSONSupport::Replace</a></div><div class="ttdeci">static uint16_t Replace(char *d, uint16_t d_length, uint16_t d_max, int16_t sp, int16_t ep, const char *s, uint16_t sl)</div><div class="ttdoc">Character string d contains substring between given character indexes that should be replaced by a nu...</div><div class="ttdef"><b>Definition:</b> gjson_support.h:342</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_ad9fffbe316b3208544297936b54d46e0"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#ad9fffbe316b3208544297936b54d46e0">gjson::JSONSupport::HasLiteralExponent</a></div><div class="ttdeci">static bool HasLiteralExponent(const char *s, uint16_t l)</div><div class="ttdoc">Query is string JSON literal decimal with exponent specified.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:309</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm_a0ca9873f1df6ebd2e9eb84dad783300a"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm#a0ca9873f1df6ebd2e9eb84dad783300a">gjson::JSONSupport::IsDecimal</a></div><div class="ttdeci">static bool IsDecimal(const char *s, const uint16_t l, const bool allow_exponent=true)</div><div class="ttdoc">Query is string numeric decimal with optional exponent check.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:158</div></div>
<div class="ttc" id="aclassgjson_1_1_j_s_o_n_support_htm"><div class="ttname"><a href="classgjson_1_1_j_s_o_n_support.htm">gjson::JSONSupport</a></div><div class="ttdoc">JSON support methods, mostly reusable string helpers.</div><div class="ttdef"><b>Definition:</b> gjson_support.h:16</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="gjson__support_8h.htm">gjson_support.h</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 19:39:01 for ArduinoGJSON by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
