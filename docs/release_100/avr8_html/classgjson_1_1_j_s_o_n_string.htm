<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGJSON: gjson::JSONString&lt; LENGTH, T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGJSON
   &#160;<span id="projectnumber">5b95ff6 (git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing and building JSON, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classgjson_1_1_j_s_o_n_string.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classgjson_1_1_j_s_o_n_string-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">gjson::JSONString&lt; LENGTH, T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A class representing a JSON in-memory string element, templated maximum dimension.  
 <a href="classgjson_1_1_j_s_o_n_string.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="gjson__elements_8h_source.htm">gjson_elements.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac4345dff62fd029901c2421e85406198"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#ac4345dff62fd029901c2421e85406198">JSONString</a> (const bool is_value=true, <a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *e=NULL)</td></tr>
<tr class="memdesc:ac4345dff62fd029901c2421e85406198"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor, make stable instance.  <a href="classgjson_1_1_j_s_o_n_string.htm#ac4345dff62fd029901c2421e85406198">More...</a><br /></td></tr>
<tr class="separator:ac4345dff62fd029901c2421e85406198"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9ef5efb245daad195e572121e5075ae"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#ac9ef5efb245daad195e572121e5075ae">JSONString</a> (const char *s, const bool is_value=true, const bool is_literal=false)</td></tr>
<tr class="memdesc:ac9ef5efb245daad195e572121e5075ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor, make stable instance with given NULL terminated string.  <a href="classgjson_1_1_j_s_o_n_string.htm#ac9ef5efb245daad195e572121e5075ae">More...</a><br /></td></tr>
<tr class="separator:ac9ef5efb245daad195e572121e5075ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6653e2163a85880d02034dc7a3cb7d88"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a6653e2163a85880d02034dc7a3cb7d88">JSONString</a> (const char *s, <a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *e, const bool is_value=true, const bool is_literal=false)</td></tr>
<tr class="memdesc:a6653e2163a85880d02034dc7a3cb7d88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor, make stable instance with given NULL terminated string, parent element and optionally indication of IsValue and IsLiteral states.  <a href="classgjson_1_1_j_s_o_n_string.htm#a6653e2163a85880d02034dc7a3cb7d88">More...</a><br /></td></tr>
<tr class="separator:a6653e2163a85880d02034dc7a3cb7d88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ef807de20090e57d9c735f1eeb0fad8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a7ef807de20090e57d9c735f1eeb0fad8">JSONString</a> (const char *s, uint16_t l, <a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *e, const bool is_value=true, const bool is_literal=false)</td></tr>
<tr class="memdesc:a7ef807de20090e57d9c735f1eeb0fad8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor, make stable instance with given NULL terminated string, string length, parent element and optionally indication of IsValue and IsLiteral states.  <a href="classgjson_1_1_j_s_o_n_string.htm#a7ef807de20090e57d9c735f1eeb0fad8">More...</a><br /></td></tr>
<tr class="separator:a7ef807de20090e57d9c735f1eeb0fad8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad969b7d7e6e9de05ee7f639ce2e061e8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#ad969b7d7e6e9de05ee7f639ce2e061e8">JSONString</a> (const T d, const char *format, const bool is_value=true, const bool prefer_literal=true)</td></tr>
<tr class="memdesc:ad969b7d7e6e9de05ee7f639ce2e061e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor, make stable instance with given type and sprint format string.  <a href="classgjson_1_1_j_s_o_n_string.htm#ad969b7d7e6e9de05ee7f639ce2e061e8">More...</a><br /></td></tr>
<tr class="separator:ad969b7d7e6e9de05ee7f639ce2e061e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a662269f37d783642caa5d41375c029f9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a662269f37d783642caa5d41375c029f9">JSONString</a> (const T d, const char *format, <a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *e, const bool is_value=true, const bool prefer_literal=true)</td></tr>
<tr class="memdesc:a662269f37d783642caa5d41375c029f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor, make stable instance with given type and sprint format string.  <a href="classgjson_1_1_j_s_o_n_string.htm#a662269f37d783642caa5d41375c029f9">More...</a><br /></td></tr>
<tr class="separator:a662269f37d783642caa5d41375c029f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a113be6765c9220579d692e4b07217d7c"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a113be6765c9220579d692e4b07217d7c">Length</a> () const</td></tr>
<tr class="memdesc:a113be6765c9220579d692e4b07217d7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query string length.  <a href="classgjson_1_1_j_s_o_n_string.htm#a113be6765c9220579d692e4b07217d7c">More...</a><br /></td></tr>
<tr class="separator:a113be6765c9220579d692e4b07217d7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab73227c1f8c1c632e2a7c1b2fd0a382c"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#ab73227c1f8c1c632e2a7c1b2fd0a382c">Length</a> (const uint16_t l)</td></tr>
<tr class="memdesc:ab73227c1f8c1c632e2a7c1b2fd0a382c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set string length.  <a href="classgjson_1_1_j_s_o_n_string.htm#ab73227c1f8c1c632e2a7c1b2fd0a382c">More...</a><br /></td></tr>
<tr class="separator:ab73227c1f8c1c632e2a7c1b2fd0a382c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6299dec62ffdc27b5f3e7124fef740b"><td class="memTemplParams" colspan="2">template&lt;typename DT &gt; </td></tr>
<tr class="memitem:ae6299dec62ffdc27b5f3e7124fef740b"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#ae6299dec62ffdc27b5f3e7124fef740b">Data</a> (const DT d, const char *format, const bool prefer_literal=true, const bool allow_exponent=<a class="el" href="gjson_8h.htm#a43451372ba40eb5393e5566343559c69">GJSON_DEFAULT_EXPONENTIAL_NOTATION</a>)</td></tr>
<tr class="memdesc:ae6299dec62ffdc27b5f3e7124fef740b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert integer type to data string.  <a href="classgjson_1_1_j_s_o_n_string.htm#ae6299dec62ffdc27b5f3e7124fef740b">More...</a><br /></td></tr>
<tr class="separator:ae6299dec62ffdc27b5f3e7124fef740b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae686c31d5cc170c6f42bb375b3356d32"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#ae686c31d5cc170c6f42bb375b3356d32">Data</a> (const char *d, const bool prefer_literal=false, const uint16_t length=0, const bool allow_exponent=<a class="el" href="gjson_8h.htm#a43451372ba40eb5393e5566343559c69">GJSON_DEFAULT_EXPONENTIAL_NOTATION</a>)</td></tr>
<tr class="memdesc:ae686c31d5cc170c6f42bb375b3356d32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set string data and additional type meta like IsLiteral and allow literal exponents.  <a href="classgjson_1_1_j_s_o_n_string.htm#ae686c31d5cc170c6f42bb375b3356d32">More...</a><br /></td></tr>
<tr class="separator:ae686c31d5cc170c6f42bb375b3356d32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acba03aa85392522c5f5fb3dd54c8365f"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">Data</a> () const</td></tr>
<tr class="memdesc:acba03aa85392522c5f5fb3dd54c8365f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get string data.  <a href="classgjson_1_1_j_s_o_n_string.htm#acba03aa85392522c5f5fb3dd54c8365f">More...</a><br /></td></tr>
<tr class="separator:acba03aa85392522c5f5fb3dd54c8365f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9cf11bdbf0bd7694e9777d36ced8340"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#ae9cf11bdbf0bd7694e9777d36ced8340">IsValue</a> () const</td></tr>
<tr class="memdesc:ae9cf11bdbf0bd7694e9777d36ced8340"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query is string data a value or property/attribute.  <a href="classgjson_1_1_j_s_o_n_string.htm#ae9cf11bdbf0bd7694e9777d36ced8340">More...</a><br /></td></tr>
<tr class="separator:ae9cf11bdbf0bd7694e9777d36ced8340"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57fa50f82794bc585f86fcf77b279dd7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a57fa50f82794bc585f86fcf77b279dd7">Value</a> (const bool is_value)</td></tr>
<tr class="memdesc:a57fa50f82794bc585f86fcf77b279dd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set string data IsValue.  <a href="classgjson_1_1_j_s_o_n_string.htm#a57fa50f82794bc585f86fcf77b279dd7">More...</a><br /></td></tr>
<tr class="separator:a57fa50f82794bc585f86fcf77b279dd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c3283b9cf0f4c4bdf3543469e7a4f94"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a4c3283b9cf0f4c4bdf3543469e7a4f94">IsValueLiteral</a> () const</td></tr>
<tr class="memdesc:a4c3283b9cf0f4c4bdf3543469e7a4f94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query string data value, is JSON literal.  <a href="classgjson_1_1_j_s_o_n_string.htm#a4c3283b9cf0f4c4bdf3543469e7a4f94">More...</a><br /></td></tr>
<tr class="separator:a4c3283b9cf0f4c4bdf3543469e7a4f94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3405800ee596a60d218fdf4a1aadb625"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a3405800ee596a60d218fdf4a1aadb625">IsNull</a> () const</td></tr>
<tr class="memdesc:a3405800ee596a60d218fdf4a1aadb625"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query string value for JSON literal null.  <a href="classgjson_1_1_j_s_o_n_string.htm#a3405800ee596a60d218fdf4a1aadb625">More...</a><br /></td></tr>
<tr class="separator:a3405800ee596a60d218fdf4a1aadb625"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8e2255110e706a41b2f0b883b81493b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#ac8e2255110e706a41b2f0b883b81493b">Null</a> ()</td></tr>
<tr class="memdesc:ac8e2255110e706a41b2f0b883b81493b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set data string to JSON literal null.  <a href="classgjson_1_1_j_s_o_n_string.htm#ac8e2255110e706a41b2f0b883b81493b">More...</a><br /></td></tr>
<tr class="separator:ac8e2255110e706a41b2f0b883b81493b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0f8ad4bdbc1ff7e55687a579d0852dd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#aa0f8ad4bdbc1ff7e55687a579d0852dd">IsBoolean</a> () const</td></tr>
<tr class="memdesc:aa0f8ad4bdbc1ff7e55687a579d0852dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query string value for JSON literal boolean.  <a href="classgjson_1_1_j_s_o_n_string.htm#aa0f8ad4bdbc1ff7e55687a579d0852dd">More...</a><br /></td></tr>
<tr class="separator:aa0f8ad4bdbc1ff7e55687a579d0852dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64678de5bfca0f2cdf6e4985b8be860d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a64678de5bfca0f2cdf6e4985b8be860d">Boolean</a> (const bool v)</td></tr>
<tr class="memdesc:a64678de5bfca0f2cdf6e4985b8be860d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set data string to JSON literal boolean.  <a href="classgjson_1_1_j_s_o_n_string.htm#a64678de5bfca0f2cdf6e4985b8be860d">More...</a><br /></td></tr>
<tr class="separator:a64678de5bfca0f2cdf6e4985b8be860d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e56ed57c4722754a951661974580888"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a3e56ed57c4722754a951661974580888">IsInt</a> (bool allow_leading_zero=false) const</td></tr>
<tr class="memdesc:a3e56ed57c4722754a951661974580888"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query string value is integer with optional leading zero inclusion.  <a href="classgjson_1_1_j_s_o_n_string.htm#a3e56ed57c4722754a951661974580888">More...</a><br /></td></tr>
<tr class="separator:a3e56ed57c4722754a951661974580888"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40377dc6c708d77928cf596c6d5f7b71"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a40377dc6c708d77928cf596c6d5f7b71">IsDecimal</a> () const</td></tr>
<tr class="memdesc:a40377dc6c708d77928cf596c6d5f7b71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query string value is decimal.  <a href="classgjson_1_1_j_s_o_n_string.htm#a40377dc6c708d77928cf596c6d5f7b71">More...</a><br /></td></tr>
<tr class="separator:a40377dc6c708d77928cf596c6d5f7b71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa51515cca0fb7fadfd3204acac180273"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#aa51515cca0fb7fadfd3204acac180273">IsHex</a> (const bool prefix_0x=true) const</td></tr>
<tr class="memdesc:aa51515cca0fb7fadfd3204acac180273"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query string value is hexadecimal.  <a href="classgjson_1_1_j_s_o_n_string.htm#aa51515cca0fb7fadfd3204acac180273">More...</a><br /></td></tr>
<tr class="separator:aa51515cca0fb7fadfd3204acac180273"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe2d2eeff6e2299521f0431b5e2f10aa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#afe2d2eeff6e2299521f0431b5e2f10aa">operator==</a> (const <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a>&lt; LENGTH &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:afe2d2eeff6e2299521f0431b5e2f10aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equals comparison operator, check string against given subject (case sensitive)  <a href="classgjson_1_1_j_s_o_n_string.htm#afe2d2eeff6e2299521f0431b5e2f10aa">More...</a><br /></td></tr>
<tr class="separator:afe2d2eeff6e2299521f0431b5e2f10aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a911c9f323baba4694d426d14c5ed691f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a911c9f323baba4694d426d14c5ed691f">operator!=</a> (const <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a>&lt; LENGTH &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a911c9f323baba4694d426d14c5ed691f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Not equals comparison operator, check string against given subject (case sensitive)  <a href="classgjson_1_1_j_s_o_n_string.htm#a911c9f323baba4694d426d14c5ed691f">More...</a><br /></td></tr>
<tr class="separator:a911c9f323baba4694d426d14c5ed691f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0799b6cbde7ad5a0119a1187b439cabc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a0799b6cbde7ad5a0119a1187b439cabc">operator==</a> (const char *rhs) const</td></tr>
<tr class="memdesc:a0799b6cbde7ad5a0119a1187b439cabc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equals comparison operator, check string against given subject (case sensitive)  <a href="classgjson_1_1_j_s_o_n_string.htm#a0799b6cbde7ad5a0119a1187b439cabc">More...</a><br /></td></tr>
<tr class="separator:a0799b6cbde7ad5a0119a1187b439cabc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afffd88597a128af985bc22505f8b4134"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#afffd88597a128af985bc22505f8b4134">operator!=</a> (const char *rhs) const</td></tr>
<tr class="memdesc:afffd88597a128af985bc22505f8b4134"><td class="mdescLeft">&#160;</td><td class="mdescRight">Not equals comparison operator, check string against given subject (case sensitive)  <a href="classgjson_1_1_j_s_o_n_string.htm#afffd88597a128af985bc22505f8b4134">More...</a><br /></td></tr>
<tr class="separator:afffd88597a128af985bc22505f8b4134"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classgjson_1_1_j_s_o_n_element"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classgjson_1_1_j_s_o_n_element')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classgjson_1_1_j_s_o_n_element.htm">gjson::JSONElement&lt; LENGTH &gt;</a></td></tr>
<tr class="memitem:ac74c4cecb610c68ff4c349c79e3423e5 inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm#ac74c4cecb610c68ff4c349c79e3423e5">JSONElement</a> (<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a> *e=NULL)</td></tr>
<tr class="memdesc:ac74c4cecb610c68ff4c349c79e3423e5 inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor, make stable instance.  <a href="classgjson_1_1_j_s_o_n_element.htm#ac74c4cecb610c68ff4c349c79e3423e5">More...</a><br /></td></tr>
<tr class="separator:ac74c4cecb610c68ff4c349c79e3423e5 inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad40f0fee08ec85671b2ac8aa86f4bf0d inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm#ad40f0fee08ec85671b2ac8aa86f4bf0d">Next</a> () const</td></tr>
<tr class="memdesc:ad40f0fee08ec85671b2ac8aa86f4bf0d inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get next JSON element.  <a href="classgjson_1_1_j_s_o_n_element.htm#ad40f0fee08ec85671b2ac8aa86f4bf0d">More...</a><br /></td></tr>
<tr class="separator:ad40f0fee08ec85671b2ac8aa86f4bf0d inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12ec343328c4f24c9dca21d5042ab897 inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm#a12ec343328c4f24c9dca21d5042ab897">Next</a> (<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a> *e)</td></tr>
<tr class="memdesc:a12ec343328c4f24c9dca21d5042ab897 inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set next JSON element.  <a href="classgjson_1_1_j_s_o_n_element.htm#a12ec343328c4f24c9dca21d5042ab897">More...</a><br /></td></tr>
<tr class="separator:a12ec343328c4f24c9dca21d5042ab897 inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc3d5141543f190a30c74f780874e5cf inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">TYPE</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">Type</a> ()</td></tr>
<tr class="memdesc:acc3d5141543f190a30c74f780874e5cf inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get JSON element type.  <a href="classgjson_1_1_j_s_o_n_element.htm#acc3d5141543f190a30c74f780874e5cf">More...</a><br /></td></tr>
<tr class="separator:acc3d5141543f190a30c74f780874e5cf inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39518c65fbd517cb941910cfafee1986 inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">TYPE</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm#a39518c65fbd517cb941910cfafee1986">Type</a> (const <a class="el" href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">TYPE</a> type)</td></tr>
<tr class="memdesc:a39518c65fbd517cb941910cfafee1986 inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set JSON element type.  <a href="classgjson_1_1_j_s_o_n_element.htm#a39518c65fbd517cb941910cfafee1986">More...</a><br /></td></tr>
<tr class="separator:a39518c65fbd517cb941910cfafee1986 inherit pub_methods_classgjson_1_1_j_s_o_n_element"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a14f69b5200814dec09156d722fb60c2e"><td class="memItemLeft" align="right" valign="top"><a id="a14f69b5200814dec09156d722fb60c2e"></a>
char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a14f69b5200814dec09156d722fb60c2e">string_</a> [LENGTH]</td></tr>
<tr class="memdesc:a14f69b5200814dec09156d722fb60c2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">String. <br /></td></tr>
<tr class="separator:a14f69b5200814dec09156d722fb60c2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18d5aa55a97cd789d0de165aadb1eff4"><td class="memItemLeft" align="right" valign="top"><a id="a18d5aa55a97cd789d0de165aadb1eff4"></a>
uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a18d5aa55a97cd789d0de165aadb1eff4">length_</a></td></tr>
<tr class="memdesc:a18d5aa55a97cd789d0de165aadb1eff4"><td class="mdescLeft">&#160;</td><td class="mdescRight">String length. <br /></td></tr>
<tr class="separator:a18d5aa55a97cd789d0de165aadb1eff4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e330fc617fe06e7b85e27402a7e70de"><td class="memItemLeft" align="right" valign="top"><a id="a9e330fc617fe06e7b85e27402a7e70de"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a9e330fc617fe06e7b85e27402a7e70de">is_value_</a></td></tr>
<tr class="memdesc:a9e330fc617fe06e7b85e27402a7e70de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is value or key. <br /></td></tr>
<tr class="separator:a9e330fc617fe06e7b85e27402a7e70de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98817960986a9a2edeec9586aa19d106"><td class="memItemLeft" align="right" valign="top"><a id="a98817960986a9a2edeec9586aa19d106"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm#a98817960986a9a2edeec9586aa19d106">literal_</a></td></tr>
<tr class="memdesc:a98817960986a9a2edeec9586aa19d106"><td class="mdescLeft">&#160;</td><td class="mdescRight">Value is literal. <br /></td></tr>
<tr class="separator:a98817960986a9a2edeec9586aa19d106"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classgjson_1_1_j_s_o_n_element"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classgjson_1_1_j_s_o_n_element')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classgjson_1_1_j_s_o_n_element.htm">gjson::JSONElement&lt; LENGTH &gt;</a></td></tr>
<tr class="memitem:a2ab1dc9f4ba28df4717e446c4b04de13 inherit pro_attribs_classgjson_1_1_j_s_o_n_element"><td class="memItemLeft" align="right" valign="top"><a id="a2ab1dc9f4ba28df4717e446c4b04de13"></a>
uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm#a2ab1dc9f4ba28df4717e446c4b04de13">type_</a></td></tr>
<tr class="memdesc:a2ab1dc9f4ba28df4717e446c4b04de13 inherit pro_attribs_classgjson_1_1_j_s_o_n_element"><td class="mdescLeft">&#160;</td><td class="mdescRight">Element type. <br /></td></tr>
<tr class="separator:a2ab1dc9f4ba28df4717e446c4b04de13 inherit pro_attribs_classgjson_1_1_j_s_o_n_element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3b6b76318e9ecba0d4811c501d3b7e0 inherit pro_attribs_classgjson_1_1_j_s_o_n_element"><td class="memItemLeft" align="right" valign="top"><a id="ad3b6b76318e9ecba0d4811c501d3b7e0"></a>
<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm#ad3b6b76318e9ecba0d4811c501d3b7e0">e_</a></td></tr>
<tr class="memdesc:ad3b6b76318e9ecba0d4811c501d3b7e0 inherit pro_attribs_classgjson_1_1_j_s_o_n_element"><td class="mdescLeft">&#160;</td><td class="mdescRight">Next item. <br /></td></tr>
<tr class="separator:ad3b6b76318e9ecba0d4811c501d3b7e0 inherit pro_attribs_classgjson_1_1_j_s_o_n_element"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classgjson_1_1_j_s_o_n_element"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classgjson_1_1_j_s_o_n_element')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classgjson_1_1_j_s_o_n_element.htm">gjson::JSONElement&lt; LENGTH &gt;</a></td></tr>
<tr class="memitem:aac7ccd0da6e57c643a306e188ac65437 inherit pub_types_classgjson_1_1_j_s_o_n_element"><td class="memItemLeft" align="right" valign="top"><a id="aac7ccd0da6e57c643a306e188ac65437"></a>enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm#aac7ccd0da6e57c643a306e188ac65437">TYPE</a> { <b>NOTSET</b>, 
<b>ARRAY</b>, 
<b>MAP</b>, 
<b>STRING</b>
 }</td></tr>
<tr class="memdesc:aac7ccd0da6e57c643a306e188ac65437"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enum of possible JSON basic element types. <br /></td></tr>
<tr class="separator:aac7ccd0da6e57c643a306e188ac65437 inherit pub_types_classgjson_1_1_j_s_o_n_element"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;uint8_t LENGTH, typename T = uint8_t&gt;<br />
class gjson::JSONString&lt; LENGTH, T &gt;</h3>

<p>A class representing a JSON in-memory string element, templated maximum dimension. </p>
<p>This will be either a attribute/property or value</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">LENGTH</td><td>Maximum length (including NULL terminator) in characters of a string attribute/property </td></tr>
    <tr><td class="paramname">T</td><td>Numeric data type used in conversion to string. Default uint8_t </td></tr>
  </table>
  </dd>
</dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="custom_object_parse_8ino-example.htm#_a17">custom_object_parse.ino</a>, <a class="el" href="object_search_1_8ino-example.htm#_a3">object_search_1.ino</a>, <a class="el" href="object_search_2_8ino-example.htm#_a4">object_search_2.ino</a>, <a class="el" href="object_update_1_8ino-example.htm#_a3">object_update_1.ino</a>, <a class="el" href="simple_object_array_8ino-example.htm#_a3">simple_object_array.ino</a>, and <a class="el" href="simple_object_map_8ino-example.htm#_a3">simple_object_map.ino</a>.</dd>
</dl>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ac4345dff62fd029901c2421e85406198"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4345dff62fd029901c2421e85406198">&#9670;&nbsp;</a></span>JSONString() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::<a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a> </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_value</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor, make stable instance. </p>
<p>Optionally allows indication of IsValue and parent in-memeory element</p>
<dl class="section note"><dt>Note</dt><dd>If parent specified then its next element pointer will be updated with this</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">is_value</td><td>IsValue boolean, when true(default) indicates string is a value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Pointer, parent element or NULL (no parent yet) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac9ef5efb245daad195e572121e5075ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9ef5efb245daad195e572121e5075ae">&#9670;&nbsp;</a></span>JSONString() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::<a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a> </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_value</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_literal</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor, make stable instance with given NULL terminated string. </p>
<p>Optionally allows indication of IsValue and Isliteral state</p>
<dl class="section attention"><dt>Attention</dt><dd>No checking is performed on literals when isn't a value string. You've been warned as there are no exceptions!</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>NULL terminated source string to copy </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_value</td><td>IsValue boolean, when true(default) indicates string is a value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_literal</td><td>IsLiteral boolean, when true indicates string value is literal, default false </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6653e2163a85880d02034dc7a3cb7d88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6653e2163a85880d02034dc7a3cb7d88">&#9670;&nbsp;</a></span>JSONString() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::<a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a> </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_value</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_literal</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor, make stable instance with given NULL terminated string, parent element and optionally indication of IsValue and IsLiteral states. </p>
<dl class="section attention"><dt>Attention</dt><dd>No checking is performed on literals when isn't a value string. You've been warned as there are no exceptions!</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>NULL terminated source string to copy </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Pointer, parent element or NULL (no parent yet) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_value</td><td>IsValue boolean, when true(default) indicates string is a value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_literal</td><td>IsLiteral boolean, when true indicates string value is literal, default false </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7ef807de20090e57d9c735f1eeb0fad8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ef807de20090e57d9c735f1eeb0fad8">&#9670;&nbsp;</a></span>JSONString() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::<a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a> </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>l</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_value</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_literal</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor, make stable instance with given NULL terminated string, string length, parent element and optionally indication of IsValue and IsLiteral states. </p>
<dl class="section attention"><dt>Attention</dt><dd>No checking is performed on literals when isn't a value string. You've been warned as there are no exceptions!</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>NULL terminated source string to copy </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Pointer, parent element or NULL (no parent yet) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">l</td><td>NULL terminated source string length (characters), not including NULL </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_value</td><td>IsValue boolean, when true(default) indicates string is a value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_literal</td><td>IsLiteral boolean, when true indicates string value is literal, default false </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad969b7d7e6e9de05ee7f639ce2e061e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad969b7d7e6e9de05ee7f639ce2e061e8">&#9670;&nbsp;</a></span>JSONString() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::<a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a> </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_value</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>prefer_literal</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor, make stable instance with given type and sprint format string. </p>
<p>Optionally allows indication of IsValue and Isliteral state</p>
<dl class="section attention"><dt>Attention</dt><dd>No checking is performed on literals when isn't a value string. You've been warned as there are no exceptions!</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">d</td><td>Data to convert </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format string for conversion using sprintf </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_value</td><td>IsValue boolean, when true(default) indicates string is a value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">prefer_literal</td><td>Prefer Literal flag, indicates data string contains a JSON literal value, default true </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a662269f37d783642caa5d41375c029f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a662269f37d783642caa5d41375c029f9">&#9670;&nbsp;</a></span>JSONString() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::<a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a> </td>
          <td>(</td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_value</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>prefer_literal</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor, make stable instance with given type and sprint format string. </p>
<p>Optionally allows indication of IsValue and Isliteral state</p>
<dl class="section attention"><dt>Attention</dt><dd>No checking is performed on literals when isn't a value string. You've been warned as there are no exceptions!</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">d</td><td>Data to convert </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format string for conversion using sprintf </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Pointer, parent element or NULL (no parent yet) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_value</td><td>IsValue boolean, when true(default) indicates string is a value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">prefer_literal</td><td>Prefer Literal flag, indicates data string contains a JSON literal value, default true </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a64678de5bfca0f2cdf6e4985b8be860d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64678de5bfca0f2cdf6e4985b8be860d">&#9670;&nbsp;</a></span>Boolean()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::Boolean </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set data string to JSON literal boolean. </p>
<p>IsLiteral will be set when element a value string</p>
<dl class="section attention"><dt>Attention</dt><dd>You can only use this function correctly if your string maximum has enough space for literal string </dd></dl>

</div>
</div>
<a id="acba03aa85392522c5f5fb3dd54c8365f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acba03aa85392522c5f5fb3dd54c8365f">&#9670;&nbsp;</a></span>Data() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::Data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get string data. </p>
<dl class="section attention"><dt>Attention</dt><dd>To simply design this pointer is to an internally managed string. Care should be taken not to corrupt</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>String pointer </dd></dl>

</div>
</div>
<a id="ae686c31d5cc170c6f42bb375b3356d32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae686c31d5cc170c6f42bb375b3356d32">&#9670;&nbsp;</a></span>Data() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::Data </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>prefer_literal</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>length</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>allow_exponent</em> = <code><a class="el" href="gjson_8h.htm#a43451372ba40eb5393e5566343559c69">GJSON_DEFAULT_EXPONENTIAL_NOTATION</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set string data and additional type meta like IsLiteral and allow literal exponents. </p>
<dl class="section attention"><dt>Attention</dt><dd>You can only specify literal true or use literal exponents if this JSON string is IsValue=true, i.e. not a property/attribute </dd></dl>
<dl class="section note"><dt>Note</dt><dd>Parser will use this method as main JSON data is handled like a large string</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">d</td><td>Pointer to data string, NULL terminated for copy </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">prefer_literal</td><td>Prefer Literal flag, indicates data string contains a JSON literal value, default false </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">length</td><td>Data string length, characters. 0 find string length internally via strlen(...) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">allow_exponent</td><td>Allow use of literal exponent values, default GJSON_DEFAULT_EXPONENTIAL_NOTATION </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Data accepted </td></tr>
    <tr><td class="paramname">false</td><td>Data accepted but not literal </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae6299dec62ffdc27b5f3e7124fef740b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6299dec62ffdc27b5f3e7124fef740b">&#9670;&nbsp;</a></span>Data() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<div class="memtemplate">
template&lt;typename DT &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::Data </td>
          <td>(</td>
          <td class="paramtype">const DT&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>prefer_literal</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>allow_exponent</em> = <code><a class="el" href="gjson_8h.htm#a43451372ba40eb5393e5566343559c69">GJSON_DEFAULT_EXPONENTIAL_NOTATION</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert integer type to data string. </p>
<dl class="section attention"><dt>Attention</dt><dd>You can only specify literal true or use literal exponents if this JSON string is IsValue=true, i.e. not a property/attribute </dd>
<dd>
Care should be taken that the string buffer size is enough for conversion</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">d</td><td>Data to convert </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>same as sprintf format string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">prefer_literal</td><td>Prefer Literal flag, indicates data string contains a JSON literal value, default true </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">allow_exponent</td><td>Allow use of literal exponent values, default GJSON_DEFAULT_EXPONENTIAL_NOTATION </td></tr>
  </table>
  </dd>
</dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">DT</td><td>Data type </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Data accepted </td></tr>
    <tr><td class="paramname">false</td><td>Data accepted but not literal </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa0f8ad4bdbc1ff7e55687a579d0852dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0f8ad4bdbc1ff7e55687a579d0852dd">&#9670;&nbsp;</a></span>IsBoolean()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::IsBoolean </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Query string value for JSON literal boolean. </p>
<dl class="section return"><dt>Returns</dt><dd>Boolean </dd></dl>

</div>
</div>
<a id="a40377dc6c708d77928cf596c6d5f7b71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40377dc6c708d77928cf596c6d5f7b71">&#9670;&nbsp;</a></span>IsDecimal()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::IsDecimal </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Query string value is decimal. </p>
<p>See <a class="el" href="classgjson_1_1_j_s_o_n_support.htm#a0ca9873f1df6ebd2e9eb84dad783300a">JSONSupport::IsDecimal</a></p>
<dl class="section return"><dt>Returns</dt><dd>Boolean </dd></dl>

</div>
</div>
<a id="aa51515cca0fb7fadfd3204acac180273"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa51515cca0fb7fadfd3204acac180273">&#9670;&nbsp;</a></span>IsHex()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::IsHex </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>prefix_0x</em> = <code>true</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Query string value is hexadecimal. </p>
<p>See <a class="el" href="classgjson_1_1_j_s_o_n_support.htm#a0ca9873f1df6ebd2e9eb84dad783300a">JSONSupport::IsDecimal</a></p>
<dl class="section return"><dt>Returns</dt><dd>Boolean </dd></dl>

</div>
</div>
<a id="a3e56ed57c4722754a951661974580888"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e56ed57c4722754a951661974580888">&#9670;&nbsp;</a></span>IsInt()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::IsInt </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>allow_leading_zero</em> = <code>false</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Query string value is integer with optional leading zero inclusion. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">allow_leading_zero</td><td>Default(false), see <a class="el" href="classgjson_1_1_j_s_o_n_support.htm#ada99703626a311f7c9cc1b6d2e140519">JSONSupport::IsInt</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Boolean </dd></dl>

</div>
</div>
<a id="a3405800ee596a60d218fdf4a1aadb625"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3405800ee596a60d218fdf4a1aadb625">&#9670;&nbsp;</a></span>IsNull()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::IsNull </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Query string value for JSON literal null. </p>
<dl class="section return"><dt>Returns</dt><dd>Boolean </dd></dl>

</div>
</div>
<a id="ae9cf11bdbf0bd7694e9777d36ced8340"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9cf11bdbf0bd7694e9777d36ced8340">&#9670;&nbsp;</a></span>IsValue()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::IsValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Query is string data a value or property/attribute. </p>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Value string </td></tr>
    <tr><td class="paramname">false</td><td>Property/attribute </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a4c3283b9cf0f4c4bdf3543469e7a4f94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c3283b9cf0f4c4bdf3543469e7a4f94">&#9670;&nbsp;</a></span>IsValueLiteral()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::IsValueLiteral </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Query string data value, is JSON literal. </p>
<dl class="section return"><dt>Returns</dt><dd>Boolean </dd></dl>

</div>
</div>
<a id="a113be6765c9220579d692e4b07217d7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a113be6765c9220579d692e4b07217d7c">&#9670;&nbsp;</a></span>Length() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::Length </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Query string length. </p>
<dl class="section return"><dt>Returns</dt><dd>Character count, not including NULL </dd></dl>

</div>
</div>
<a id="ab73227c1f8c1c632e2a7c1b2fd0a382c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab73227c1f8c1c632e2a7c1b2fd0a382c">&#9670;&nbsp;</a></span>Length() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::Length </td>
          <td>(</td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>l</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set string length. </p>
<p>Can be used to truncate, will move NULL location as required</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">l</td><td>Length, characters, not including NULL </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Character count, not including NULL </dd></dl>

</div>
</div>
<a id="ac8e2255110e706a41b2f0b883b81493b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8e2255110e706a41b2f0b883b81493b">&#9670;&nbsp;</a></span>Null()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::Null </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set data string to JSON literal null. </p>
<p>IsLiteral will be set when element a value string</p>
<dl class="section attention"><dt>Attention</dt><dd>You can only use this function correctly if your string maximum has enough space for literal string </dd></dl>

</div>
</div>
<a id="afffd88597a128af985bc22505f8b4134"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afffd88597a128af985bc22505f8b4134">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Not equals comparison operator, check string against given subject (case sensitive) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>ASCII subject string (subject) </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>strings differ </td></tr>
    <tr><td class="paramname">false</td><td>strings match </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a911c9f323baba4694d426d14c5ed691f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a911c9f323baba4694d426d14c5ed691f">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a>&lt; LENGTH &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Not equals comparison operator, check string against given subject (case sensitive) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString&lt;LENGTH&gt;</a> reference string (subject) </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>strings differ </td></tr>
    <tr><td class="paramname">false</td><td>strings match </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0799b6cbde7ad5a0119a1187b439cabc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0799b6cbde7ad5a0119a1187b439cabc">&#9670;&nbsp;</a></span>operator==() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Equals comparison operator, check string against given subject (case sensitive) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>ASCII subject string (subject) </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>strings match </td></tr>
    <tr><td class="paramname">false</td><td>strings differ </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="afe2d2eeff6e2299521f0431b5e2f10aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe2d2eeff6e2299521f0431b5e2f10aa">&#9670;&nbsp;</a></span>operator==() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a>&lt; LENGTH &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Equals comparison operator, check string against given subject (case sensitive) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString&lt;LENGTH&gt;</a> reference string (subject) </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>strings match </td></tr>
    <tr><td class="paramname">false</td><td>strings differ </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a57fa50f82794bc585f86fcf77b279dd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57fa50f82794bc585f86fcf77b279dd7">&#9670;&nbsp;</a></span>Value()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH, typename T  = uint8_t&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">gjson::JSONString</a>&lt; LENGTH, T &gt;::Value </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set string data IsValue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">is_value</td><td>Boolean indicating (true) string data is value otherwise (false) property/attribute </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>See <a class="el" href="classgjson_1_1_j_s_o_n_string.htm#ae9cf11bdbf0bd7694e9777d36ced8340">IsValue</a> </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>gjson</b></li><li class="navelem"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 19:11:13 for ArduinoGJSON by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
