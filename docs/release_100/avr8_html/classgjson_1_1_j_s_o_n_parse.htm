<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoGJSON: gjson::JSONParse&lt; LENGTH &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoGJSON
   &#160;<span id="projectnumber">release_100-d2fdcd7 (git)</span>
   </div>
   <div id="projectbrief">Embedded library for parsing and building JSON, supporting Arduino, portable (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classgjson_1_1_j_s_o_n_parse.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classgjson_1_1_j_s_o_n_parse-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">gjson::JSONParse&lt; LENGTH &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>JSON base non-recursive parser offering string parsing using user supplied I/O.  
 <a href="classgjson_1_1_j_s_o_n_parse.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="gjson__parser_8h_source.htm">gjson_parser.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a35a357a7297ede7046f86752a892e073"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a35a357a7297ede7046f86752a892e073">JSONParse</a> (<a class="el" href="classgjson_1_1_i_o.htm">IO</a> *io, uint16_t memory_limit=256)</td></tr>
<tr class="memdesc:a35a357a7297ede7046f86752a892e073"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor, make stable instance with I/O and object memory limit specifiers.  <a href="classgjson_1_1_j_s_o_n_parse.htm#a35a357a7297ede7046f86752a892e073">More...</a><br /></td></tr>
<tr class="separator:a35a357a7297ede7046f86752a892e073"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae452d7337e07f183e8f4a73d4024e3a0"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#ae452d7337e07f183e8f4a73d4024e3a0">TokenArray</a> (const <a class="el" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray</a>&lt; LENGTH &gt; *e, char *s=NULL, uint16_t i=0)</td></tr>
<tr class="memdesc:ae452d7337e07f183e8f4a73d4024e3a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback for JSON array element handling.  <a href="classgjson_1_1_j_s_o_n_parse.htm#ae452d7337e07f183e8f4a73d4024e3a0">More...</a><br /></td></tr>
<tr class="separator:ae452d7337e07f183e8f4a73d4024e3a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2978c64590a563494b529baf9a3d8e6"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#ad2978c64590a563494b529baf9a3d8e6">TokenMap</a> (const <a class="el" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray</a>&lt; LENGTH &gt; *e, char *s=NULL, uint16_t i=0)</td></tr>
<tr class="memdesc:ad2978c64590a563494b529baf9a3d8e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback for JSON map element handling.  <a href="classgjson_1_1_j_s_o_n_parse.htm#ad2978c64590a563494b529baf9a3d8e6">More...</a><br /></td></tr>
<tr class="separator:ad2978c64590a563494b529baf9a3d8e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64ecc54e29da2a937bf9bd1e1cac5852"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a64ecc54e29da2a937bf9bd1e1cac5852">TokenString</a> (const <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a>&lt; LENGTH &gt; *e, char *s=NULL, int16_t si=0, int16_t ei=0)</td></tr>
<tr class="memdesc:a64ecc54e29da2a937bf9bd1e1cac5852"><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback for JSON string element handling.  <a href="classgjson_1_1_j_s_o_n_parse.htm#a64ecc54e29da2a937bf9bd1e1cac5852">More...</a><br /></td></tr>
<tr class="separator:a64ecc54e29da2a937bf9bd1e1cac5852"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc670f2ed5e813460c299da727c4791c"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#abc670f2ed5e813460c299da727c4791c">FromString</a> (const uint16_t psi=0, <a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; **h=NULL)</td></tr>
<tr class="memdesc:abc670f2ed5e813460c299da727c4791c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse JSON string stored in I/O object, optionally build JSON object chain.  <a href="classgjson_1_1_j_s_o_n_parse.htm#abc670f2ed5e813460c299da727c4791c">More...</a><br /></td></tr>
<tr class="separator:abc670f2ed5e813460c299da727c4791c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7bb5fb9f995000c5cf86f66351af2a9"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#ae7bb5fb9f995000c5cf86f66351af2a9">FromString</a> (char *s, <a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; **h=NULL, uint16_t psi=0)</td></tr>
<tr class="memdesc:ae7bb5fb9f995000c5cf86f66351af2a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse given JSON string, optionally build JSON object chain.  <a href="classgjson_1_1_j_s_o_n_parse.htm#ae7bb5fb9f995000c5cf86f66351af2a9">More...</a><br /></td></tr>
<tr class="separator:ae7bb5fb9f995000c5cf86f66351af2a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a100259b154df186fef74678128c1dd66"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a100259b154df186fef74678128c1dd66">FromObject</a> (<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *e)</td></tr>
<tr class="memdesc:a100259b154df186fef74678128c1dd66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse given JSON object chain, build JSON string in I/O object, optionally build JSON string.  <a href="classgjson_1_1_j_s_o_n_parse.htm#a100259b154df186fef74678128c1dd66">More...</a><br /></td></tr>
<tr class="separator:a100259b154df186fef74678128c1dd66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ebd8c0fa9404fc2f0d5b5f900f1f091"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1ebd8c0fa9404fc2f0d5b5f900f1f091">FindObject</a> (<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *e)</td></tr>
<tr class="memdesc:a1ebd8c0fa9404fc2f0d5b5f900f1f091"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse given JSON object chain looking for an object previously setup via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a851a9e93337ea30a695313cc11e95411">Like</a>.  <a href="classgjson_1_1_j_s_o_n_parse.htm#a1ebd8c0fa9404fc2f0d5b5f900f1f091">More...</a><br /></td></tr>
<tr class="separator:a1ebd8c0fa9404fc2f0d5b5f900f1f091"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af456b6f067d888ec18aa398980c19066"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray</a>&lt; LENGTH &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#af456b6f067d888ec18aa398980c19066">NextArray</a> (<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *e, const bool is_open=true)</td></tr>
<tr class="memdesc:af456b6f067d888ec18aa398980c19066"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse given JSON object chain looking for next Array object (from given chain entry) Routine uses <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1ebd8c0fa9404fc2f0d5b5f900f1f091">FindObject</a>, see for further details.  <a href="classgjson_1_1_j_s_o_n_parse.htm#af456b6f067d888ec18aa398980c19066">More...</a><br /></td></tr>
<tr class="separator:af456b6f067d888ec18aa398980c19066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9d3cab50dda72ef49355abeea3dc61c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgjson_1_1_j_s_o_n_map.htm">JSONMap</a>&lt; LENGTH &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#ac9d3cab50dda72ef49355abeea3dc61c">NextMap</a> (<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *e, bool is_open=true)</td></tr>
<tr class="memdesc:ac9d3cab50dda72ef49355abeea3dc61c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse given JSON object chain looking for next Map object (from given chain entry).  <a href="classgjson_1_1_j_s_o_n_parse.htm#ac9d3cab50dda72ef49355abeea3dc61c">More...</a><br /></td></tr>
<tr class="separator:ac9d3cab50dda72ef49355abeea3dc61c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1161c22b54f27000141b457fc6a458df"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a>&lt; LENGTH &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1161c22b54f27000141b457fc6a458df">NextString</a> (<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *e, bool is_value=true)</td></tr>
<tr class="memdesc:a1161c22b54f27000141b457fc6a458df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse given JSON object chain looking for next String object (from given chain entry).  <a href="classgjson_1_1_j_s_o_n_parse.htm#a1161c22b54f27000141b457fc6a458df">More...</a><br /></td></tr>
<tr class="separator:a1161c22b54f27000141b457fc6a458df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add9c201680aad9d89ca86a1e074d0e54"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a>&lt; LENGTH &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#add9c201680aad9d89ca86a1e074d0e54">FindString</a> (<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *e, char *s, bool is_value=true, const bool case_sensitive=false)</td></tr>
<tr class="memdesc:add9c201680aad9d89ca86a1e074d0e54"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse given JSON object chain looking for a String object (from given chain entry) matching string characteristics.  <a href="classgjson_1_1_j_s_o_n_parse.htm#add9c201680aad9d89ca86a1e074d0e54">More...</a><br /></td></tr>
<tr class="separator:add9c201680aad9d89ca86a1e074d0e54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1857f34d7e00cdcf2510a9fe40a520a5"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1857f34d7e00cdcf2510a9fe40a520a5">MemoryLimit</a> (const uint16_t limit_memory=0)</td></tr>
<tr class="memdesc:a1857f34d7e00cdcf2510a9fe40a520a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get or set object chain creation memory limit (Bytes)  <a href="classgjson_1_1_j_s_o_n_parse.htm#a1857f34d7e00cdcf2510a9fe40a520a5">More...</a><br /></td></tr>
<tr class="separator:a1857f34d7e00cdcf2510a9fe40a520a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a851a9e93337ea30a695313cc11e95411"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a851a9e93337ea30a695313cc11e95411">Like</a> (<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *like, const bool case_sensitive=true)</td></tr>
<tr class="memdesc:a851a9e93337ea30a695313cc11e95411"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setup JSON element to find by <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1ebd8c0fa9404fc2f0d5b5f900f1f091">FindObject</a>.  <a href="classgjson_1_1_j_s_o_n_parse.htm#a851a9e93337ea30a695313cc11e95411">More...</a><br /></td></tr>
<tr class="separator:a851a9e93337ea30a695313cc11e95411"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3d5c9be381283fb7e3fc6f108aae978"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aa3d5c9be381283fb7e3fc6f108aae978">LimitNodeLevel</a> (const bool limit_node_level=true)</td></tr>
<tr class="memdesc:aa3d5c9be381283fb7e3fc6f108aae978"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set limit node level flag.  <a href="classgjson_1_1_j_s_o_n_parse.htm#aa3d5c9be381283fb7e3fc6f108aae978">More...</a><br /></td></tr>
<tr class="separator:aa3d5c9be381283fb7e3fc6f108aae978"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5beef1e398a97438fe14fee4e2324df0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a5beef1e398a97438fe14fee4e2324df0">Callbacks</a> (bool callbacks)</td></tr>
<tr class="memdesc:a5beef1e398a97438fe14fee4e2324df0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set Callbacks flag indicating use of callbacks.  <a href="classgjson_1_1_j_s_o_n_parse.htm#a5beef1e398a97438fe14fee4e2324df0">More...</a><br /></td></tr>
<tr class="separator:a5beef1e398a97438fe14fee4e2324df0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad923f7f75556375c7a9b19fbd6540c45"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#ad923f7f75556375c7a9b19fbd6540c45">Callbacks</a> ()</td></tr>
<tr class="memdesc:ad923f7f75556375c7a9b19fbd6540c45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Callbacks flag indicating use of callbacks.  <a href="classgjson_1_1_j_s_o_n_parse.htm#ad923f7f75556375c7a9b19fbd6540c45">More...</a><br /></td></tr>
<tr class="separator:ad923f7f75556375c7a9b19fbd6540c45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24c157d15bc07f98f6555472e53e04b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8">ERR</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a24c157d15bc07f98f6555472e53e04b2">GetLastError</a> () const</td></tr>
<tr class="memdesc:a24c157d15bc07f98f6555472e53e04b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get last JSON parse or find error condition (if any).  <a href="classgjson_1_1_j_s_o_n_parse.htm#a24c157d15bc07f98f6555472e53e04b2">More...</a><br /></td></tr>
<tr class="separator:a24c157d15bc07f98f6555472e53e04b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa931e443cfa598e5fd949575ff58ccad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41c">OP</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aa931e443cfa598e5fd949575ff58ccad">GetLastOperation</a> () const</td></tr>
<tr class="memdesc:aa931e443cfa598e5fd949575ff58ccad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get last or current JSON parse or find operation (if any).  <a href="classgjson_1_1_j_s_o_n_parse.htm#aa931e443cfa598e5fd949575ff58ccad">More...</a><br /></td></tr>
<tr class="separator:aa931e443cfa598e5fd949575ff58ccad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46fcb5f7a85eef8ab886f1771707819a"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a46fcb5f7a85eef8ab886f1771707819a">GetBinarySize</a> () const</td></tr>
<tr class="memdesc:a46fcb5f7a85eef8ab886f1771707819a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get object chain binary size.  <a href="classgjson_1_1_j_s_o_n_parse.htm#a46fcb5f7a85eef8ab886f1771707819a">More...</a><br /></td></tr>
<tr class="separator:a46fcb5f7a85eef8ab886f1771707819a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa66f44a617f2ad4482ca3a5d196594c4"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aa66f44a617f2ad4482ca3a5d196594c4">Length</a> ()</td></tr>
<tr class="memdesc:aa66f44a617f2ad4482ca3a5d196594c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get I/O object data length, see <a class="el" href="classgjson_1_1_i_o.htm#a70867f05ad07d5e67db7be2544d29e09">gjson::IO::GetLength</a>.  <a href="classgjson_1_1_j_s_o_n_parse.htm#aa66f44a617f2ad4482ca3a5d196594c4">More...</a><br /></td></tr>
<tr class="separator:aa66f44a617f2ad4482ca3a5d196594c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c85d62d81a79f6a1a5f5fb9d17fe2c5"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a2c85d62d81a79f6a1a5f5fb9d17fe2c5">Get</a> ()</td></tr>
<tr class="memdesc:a2c85d62d81a79f6a1a5f5fb9d17fe2c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get I/O object data pointer.  <a href="classgjson_1_1_j_s_o_n_parse.htm#a2c85d62d81a79f6a1a5f5fb9d17fe2c5">More...</a><br /></td></tr>
<tr class="separator:a2c85d62d81a79f6a1a5f5fb9d17fe2c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad417d9b75178b3c3da38ce4f5e8a3a55"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#ad417d9b75178b3c3da38ce4f5e8a3a55">Release</a> (<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; **h)</td></tr>
<tr class="memdesc:ad417d9b75178b3c3da38ce4f5e8a3a55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Release object chain.  <a href="classgjson_1_1_j_s_o_n_parse.htm#ad417d9b75178b3c3da38ce4f5e8a3a55">More...</a><br /></td></tr>
<tr class="separator:ad417d9b75178b3c3da38ce4f5e8a3a55"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:af1f934a9de0f5c16cc234a9abe500734"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#af1f934a9de0f5c16cc234a9abe500734">IsLiteralCharater</a> (char c)</td></tr>
<tr class="memdesc:af1f934a9de0f5c16cc234a9abe500734"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if character exists within JSON literal alphabet, if all characters of a string were within alphabet then that string could be a literal.  <a href="classgjson_1_1_j_s_o_n_parse.htm#af1f934a9de0f5c16cc234a9abe500734">More...</a><br /></td></tr>
<tr class="separator:af1f934a9de0f5c16cc234a9abe500734"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a6e2349b6c492c287478def39696ff4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1a6e2349b6c492c287478def39696ff4">CaseSensitive</a> (const bool case_sensitive)</td></tr>
<tr class="memdesc:a1a6e2349b6c492c287478def39696ff4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to set case sensitive searching.  <a href="classgjson_1_1_j_s_o_n_parse.htm#a1a6e2349b6c492c287478def39696ff4">More...</a><br /></td></tr>
<tr class="separator:a1a6e2349b6c492c287478def39696ff4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d2c9fe3bac5f6e4c7b6613b0301b76f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a6d2c9fe3bac5f6e4c7b6613b0301b76f">Error</a> (const <a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8">ERR</a> error)</td></tr>
<tr class="memdesc:a6d2c9fe3bac5f6e4c7b6613b0301b76f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to set error condition.  <a href="classgjson_1_1_j_s_o_n_parse.htm#a6d2c9fe3bac5f6e4c7b6613b0301b76f">More...</a><br /></td></tr>
<tr class="separator:a6d2c9fe3bac5f6e4c7b6613b0301b76f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a27e99c8992b02e5964f20f737fc1ca7b"><td class="memItemLeft" align="right" valign="top"><a id="a27e99c8992b02e5964f20f737fc1ca7b"></a>
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8">ERR</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a27e99c8992b02e5964f20f737fc1ca7b">last_error_</a></td></tr>
<tr class="memdesc:a27e99c8992b02e5964f20f737fc1ca7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Last error. <br /></td></tr>
<tr class="separator:a27e99c8992b02e5964f20f737fc1ca7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa492c37665cb94cc66981f36f2145fe0"><td class="memItemLeft" align="right" valign="top"><a id="aa492c37665cb94cc66981f36f2145fe0"></a>
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41c">OP</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aa492c37665cb94cc66981f36f2145fe0">operation_</a></td></tr>
<tr class="memdesc:aa492c37665cb94cc66981f36f2145fe0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Current operation. <br /></td></tr>
<tr class="separator:aa492c37665cb94cc66981f36f2145fe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaed53f64aaa5b11bdaddc34c5ed11b98"><td class="memItemLeft" align="right" valign="top"><a id="aaed53f64aaa5b11bdaddc34c5ed11b98"></a>
uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aaed53f64aaa5b11bdaddc34c5ed11b98">binary_size_</a></td></tr>
<tr class="memdesc:aaed53f64aaa5b11bdaddc34c5ed11b98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of binary, Bytes. <br /></td></tr>
<tr class="separator:aaed53f64aaa5b11bdaddc34c5ed11b98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48b336f6b59d340dd3fe243e72bf1038"><td class="memItemLeft" align="right" valign="top"><a id="a48b336f6b59d340dd3fe243e72bf1038"></a>
uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a48b336f6b59d340dd3fe243e72bf1038">limit_memory_</a></td></tr>
<tr class="memdesc:a48b336f6b59d340dd3fe243e72bf1038"><td class="mdescLeft">&#160;</td><td class="mdescRight">Limit of memory, Bytes. <br /></td></tr>
<tr class="separator:a48b336f6b59d340dd3fe243e72bf1038"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e68d72e159bcb1b86ced96c32ad1788"><td class="memItemLeft" align="right" valign="top"><a id="a7e68d72e159bcb1b86ced96c32ad1788"></a>
<a class="el" href="classgjson_1_1_i_o.htm">IO</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a7e68d72e159bcb1b86ced96c32ad1788">io_</a></td></tr>
<tr class="memdesc:a7e68d72e159bcb1b86ced96c32ad1788"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classgjson_1_1_i_o.htm" title="An abstract class describing the interface of a JSON parser I/O instance.">IO</a> instance pointer. <br /></td></tr>
<tr class="separator:a7e68d72e159bcb1b86ced96c32ad1788"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b35af0988dcccb4aea028dc6c4c3817"><td class="memItemLeft" align="right" valign="top"><a id="a9b35af0988dcccb4aea028dc6c4c3817"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a9b35af0988dcccb4aea028dc6c4c3817">limit_node_level_</a></td></tr>
<tr class="memdesc:a9b35af0988dcccb4aea028dc6c4c3817"><td class="mdescLeft">&#160;</td><td class="mdescRight">Limit node level flag. <br /></td></tr>
<tr class="separator:a9b35af0988dcccb4aea028dc6c4c3817"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae75882a3163e061c0f19b104908dcfc8"><td class="memItemLeft" align="right" valign="top"><a id="ae75882a3163e061c0f19b104908dcfc8"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#ae75882a3163e061c0f19b104908dcfc8">callbacks_</a></td></tr>
<tr class="memdesc:ae75882a3163e061c0f19b104908dcfc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Callbacks employed flag. <br /></td></tr>
<tr class="separator:ae75882a3163e061c0f19b104908dcfc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b512abf1f24617d6665dba1ed02f12f"><td class="memItemLeft" align="right" valign="top"><a id="a1b512abf1f24617d6665dba1ed02f12f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1b512abf1f24617d6665dba1ed02f12f">case_sensitive_</a></td></tr>
<tr class="memdesc:a1b512abf1f24617d6665dba1ed02f12f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case sensitive checks flag. <br /></td></tr>
<tr class="separator:a1b512abf1f24617d6665dba1ed02f12f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ee0dba00b64be0c232ff87f65e44ff3"><td class="memItemLeft" align="right" valign="top"><a id="a5ee0dba00b64be0c232ff87f65e44ff3"></a>
<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a5ee0dba00b64be0c232ff87f65e44ff3">last_e_</a></td></tr>
<tr class="memdesc:a5ee0dba00b64be0c232ff87f65e44ff3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Last element processed pointer. <br /></td></tr>
<tr class="separator:a5ee0dba00b64be0c232ff87f65e44ff3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a336cb895b800e0311438abcacfb40f5d"><td class="memItemLeft" align="right" valign="top"><a id="a336cb895b800e0311438abcacfb40f5d"></a>
<a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a336cb895b800e0311438abcacfb40f5d">like_</a></td></tr>
<tr class="memdesc:a336cb895b800e0311438abcacfb40f5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Search like element pointer. <br /></td></tr>
<tr class="separator:a336cb895b800e0311438abcacfb40f5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_structgjson_1_1_j_s_o_n_constant"><td colspan="2" onclick="javascript:toggleInherit('pub_types_structgjson_1_1_j_s_o_n_constant')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="structgjson_1_1_j_s_o_n_constant.htm">gjson::JSONConstant</a></td></tr>
<tr class="memitem:aac0b5401492d610d8a69a4860e7d13d8 inherit pub_types_structgjson_1_1_j_s_o_n_constant"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8">ERR</a> { <br />
&#160;&#160;<b>ERR_NONE</b>, 
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8a28349f032fd21071c39ec2184ee52efb">ERR_UNEXPECTED_END_OF_ARRAY</a>, 
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8aee4c22bba0e54eb71ec04b8ba3fb4a33">ERR_UNEXPECTED_END_OF_MAP</a>, 
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8ac131ef442451ea22d90a7a84b3021df1">ERR_BAD_ATTRIBUTE</a>, 
<br />
&#160;&#160;<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8a5d0188744f09bedb5a89b82ef36f2f6c">ERR_BAD_VALUE</a>, 
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8a4c78a0124e919f7d80be6859ea49c99b">ERR_UNTERMINATED_STRING</a>, 
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8a8786a8d3797bab802a1677431dfdf0dd">ERR_UNEXPECTED_DATA</a>, 
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8a43b8c800426460be17a1cf645dd0f4c0">ERR_NOT_FOUND</a>, 
<br />
&#160;&#160;<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8ac1051000a0b438678f855e1ef4906f13">ERR_OBJECT_MEMORY_LIMIT</a>, 
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8aaa5454874311b416ca245d7a2a5ba81d">ERR_CHAR_MEMORY_LIMIT</a>, 
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8a550d893ec758ce1c35e2980ff814860a">ERR_CALLBACK_STOP</a>
<br />
 }</td></tr>
<tr class="memdesc:aac0b5401492d610d8a69a4860e7d13d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enum of possible interface related errors.  <a href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8">More...</a><br /></td></tr>
<tr class="separator:aac0b5401492d610d8a69a4860e7d13d8 inherit pub_types_structgjson_1_1_j_s_o_n_constant"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60c2523719bda53203aed8241303e41c inherit pub_types_structgjson_1_1_j_s_o_n_constant"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41c">OP</a> { <br />
&#160;&#160;<b>OP_NONE</b>, 
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41cae2c2d8b6177b65991d6295b21c1e465f">OP_FROM_STRING</a>, 
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41ca39072647ba20d245485f9b7d22ed7db9">OP_FROM_OBJECT</a>, 
<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41ca83bd70b5150172ef2dcb4f260b228fe6">OP_FIND_OBJECT</a>, 
<br />
&#160;&#160;<a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41ca0a7590be25427ff0174143e00df07df8">OP_RELEASE_OBJECT</a>
<br />
 }</td></tr>
<tr class="memdesc:a60c2523719bda53203aed8241303e41c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enum of possible JSON operation, debug aid.  <a href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41c">More...</a><br /></td></tr>
<tr class="separator:a60c2523719bda53203aed8241303e41c inherit pub_types_structgjson_1_1_j_s_o_n_constant"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;uint8_t LENGTH&gt;<br />
class gjson::JSONParse&lt; LENGTH &gt;</h3>

<p>JSON base non-recursive parser offering string parsing using user supplied I/O. </p>
<p>Features include parsing string with tokenised callbacks for basic JSON elements, object chain creation, searching objects, moving around object chain and converting objects back into JSON.</p>
<p>Implementation is pretty skinny to keep footprint down to meet where possible, memory requirements of a resource limited micro controller.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">LENGTH</td><td>Maximum length (including NULL terminator) in characters of a string attribute/property </td></tr>
  </table>
  </dd>
</dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="custom_object_parse_8ino-example.htm#_a0">custom_object_parse.ino</a>, <a class="el" href="custom_string_parse_8ino-example.htm#_a0">custom_string_parse.ino</a>, <a class="el" href="object_search_1_8ino-example.htm#_a1">object_search_1.ino</a>, <a class="el" href="object_search_2_8ino-example.htm#_a1">object_search_2.ino</a>, <a class="el" href="object_update_1_8ino-example.htm#_a1">object_update_1.ino</a>, <a class="el" href="object_update_2_8ino-example.htm#_a1">object_update_2.ino</a>, <a class="el" href="simple_object_array_8ino-example.htm#_a1">simple_object_array.ino</a>, <a class="el" href="simple_object_array_map_8ino-example.htm#_a1">simple_object_array_map.ino</a>, <a class="el" href="simple_object_map_8ino-example.htm#_a1">simple_object_map.ino</a>, <a class="el" href="simple_object_map_map_8ino-example.htm#_a1">simple_object_map_map.ino</a>, <a class="el" href="simple_object_map_map_2_8ino-example.htm#_a1">simple_object_map_map_2.ino</a>, <a class="el" href="string_to_object_1_8ino-example.htm#_a1">string_to_object_1.ino</a>, <a class="el" href="string_to_object_2_8ino-example.htm#_a1">string_to_object_2.ino</a>, and <a class="el" href="string_to_object_to_string_8ino-example.htm#_a1">string_to_object_to_string.ino</a>.</dd>
</dl>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a35a357a7297ede7046f86752a892e073"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35a357a7297ede7046f86752a892e073">&#9670;&nbsp;</a></span>JSONParse()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::<a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">JSONParse</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_i_o.htm">IO</a> *&#160;</td>
          <td class="paramname"><em>io</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>memory_limit</em> = <code>256</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor, make stable instance with I/O and object memory limit specifiers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">io</td><td>Pointer to I/O instance </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">memory_limit</td><td>Size (Bytes) of object memory if any. Defaults to 256 Bytes </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ad923f7f75556375c7a9b19fbd6540c45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad923f7f75556375c7a9b19fbd6540c45">&#9670;&nbsp;</a></span>Callbacks() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::Callbacks </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get Callbacks flag indicating use of callbacks. </p>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Callbacks used </td></tr>
    <tr><td class="paramname">false</td><td>Callbacks not used </td></tr>
  </table>
  </dd>
</dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="custom_object_parse_8ino-example.htm#a1">custom_object_parse.ino</a>, and <a class="el" href="custom_string_parse_8ino-example.htm#a1">custom_string_parse.ino</a>.</dd>
</dl>

</div>
</div>
<a id="a5beef1e398a97438fe14fee4e2324df0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5beef1e398a97438fe14fee4e2324df0">&#9670;&nbsp;</a></span>Callbacks() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::Callbacks </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>callbacks</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set Callbacks flag indicating use of callbacks. </p>
<p>This is used by parsing both object and character JSON. By default callbacks are not implemented within this class but subclasses will likely implement.</p>
<dl class="section attention"><dt>Attention</dt><dd>Callbacks should only be employed if custom functionality required by subclasses</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">callbacks</td><td>Flag state </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1a6e2349b6c492c287478def39696ff4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a6e2349b6c492c287478def39696ff4">&#9670;&nbsp;</a></span>CaseSensitive()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::CaseSensitive </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>case_sensitive</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Helper to set case sensitive searching. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">case_sensitive</td><td>For string comparisons, case sensitive flag, default true </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6d2c9fe3bac5f6e4c7b6613b0301b76f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d2c9fe3bac5f6e4c7b6613b0301b76f">&#9670;&nbsp;</a></span>Error()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::Error </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8">ERR</a>&#160;</td>
          <td class="paramname"><em>error</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Helper to set error condition. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">error</td><td>Error condition code, <a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8">ERR</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1ebd8c0fa9404fc2f0d5b5f900f1f091"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ebd8c0fa9404fc2f0d5b5f900f1f091">&#9670;&nbsp;</a></span>FindObject()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt;LENGTH&gt;* <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::FindObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parse given JSON object chain looking for an object previously setup via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a851a9e93337ea30a695313cc11e95411">Like</a>. </p>
<dl class="section note"><dt>Note</dt><dd>If object chain not start then node alignments will not be met, i.e. there maybe more Array or Map closes than opens. In this situation caller should disable via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aa3d5c9be381283fb7e3fc6f108aae978">LimitNodeLevel</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Pointer to first JSON element in object chain </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Found element pointer or NULL (not found) </dd></dl>

</div>
</div>
<a id="add9c201680aad9d89ca86a1e074d0e54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add9c201680aad9d89ca86a1e074d0e54">&#9670;&nbsp;</a></span>FindString()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a>&lt;LENGTH&gt;* <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::FindString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_value</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>case_sensitive</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parse given JSON object chain looking for a String object (from given chain entry) matching string characteristics. </p>
<p>Routine uses <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1ebd8c0fa9404fc2f0d5b5f900f1f091">FindObject</a>, see for further details.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Pointer to first JSON element in object chain </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>Pointer to NULL terminated search string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_value</td><td>String must be a value(true, default) or property/attribute type(false) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">case_sensitive</td><td>Flag indicating search should be case sensitive, default false </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Found element pointer or NULL (not found) </dd></dl>

</div>
</div>
<a id="a100259b154df186fef74678128c1dd66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a100259b154df186fef74678128c1dd66">&#9670;&nbsp;</a></span>FromObject()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::FromObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parse given JSON object chain, build JSON string in I/O object, optionally build JSON string. </p>
<dl class="section attention"><dt>Attention</dt><dd>If callbacks employed via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a5beef1e398a97438fe14fee4e2324df0">Callbacks</a> set to true then NO output string is created. It is assumed the callbacks will handle JSON string generation.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>If I/O object is not a buffer of some kind you may not have any resulting JSON string.</dd>
<dd>
If object chain not start then node alignments will not be met, i.e. there maybe more Array or Map closes than opens. In this situation caller should disable via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aa3d5c9be381283fb7e3fc6f108aae978">LimitNodeLevel</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Pointer to first JSON element in object chain </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Success </td></tr>
    <tr><td class="paramname">false</td><td>Failure, check <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a24c157d15bc07f98f6555472e53e04b2">GetLastError</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="custom_object_parse_8ino-example.htm#a2">custom_object_parse.ino</a>.</dd>
</dl>

</div>
</div>
<a id="ae7bb5fb9f995000c5cf86f66351af2a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7bb5fb9f995000c5cf86f66351af2a9">&#9670;&nbsp;</a></span>FromString() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::FromString </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; **&#160;</td>
          <td class="paramname"><em>h</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>psi</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parse given JSON string, optionally build JSON object chain. </p>
<dl class="section attention"><dt>Attention</dt><dd>Caller should check <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a24c157d15bc07f98f6555472e53e04b2">GetLastError</a> upon completion for any error condition that may have risen during parse</dd>
<dd>
Caller should release any object chain via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#ad417d9b75178b3c3da38ce4f5e8a3a55">Release</a></dd></dl>
<dl class="section note"><dt>Note</dt><dd>If JSON string part way through then node alignments will not be met, i.e. there maybe more Array or Map closes than opens. In this situation caller should disable via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aa3d5c9be381283fb7e3fc6f108aae978">LimitNodeLevel</a></dd>
<dd>
If JSON object chain to large, consider increasing via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1857f34d7e00cdcf2510a9fe40a520a5">MemoryLimit</a></dd>
<dd>
After use, caller can assess what would be the object chain memory footprint via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a46fcb5f7a85eef8ab886f1771707819a">GetBinarySize</a>. This is calculated even if no objects are generated</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000002">Todo:</a></b></dt><dd>Refactor object chain elements to release themself</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>JSON source string, NULL terminated </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h</td><td>Pointer to pointer of JSON element to take object chain updates. Default is NULL (do not create object chain, just parse) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">psi</td><td>Parse start character index, default 0 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Last character index parsed. Debug aid upon error conditions </dd></dl>

</div>
</div>
<a id="abc670f2ed5e813460c299da727c4791c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc670f2ed5e813460c299da727c4791c">&#9670;&nbsp;</a></span>FromString() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::FromString </td>
          <td>(</td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>psi</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; **&#160;</td>
          <td class="paramname"><em>h</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parse JSON string stored in I/O object, optionally build JSON object chain. </p>
<dl class="section attention"><dt>Attention</dt><dd>Caller should check <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a24c157d15bc07f98f6555472e53e04b2">GetLastError</a> upon completion for any error condition that may have risen during parse</dd>
<dd>
Make sure I/O contains a JSON string prior to invoke</dd>
<dd>
Caller should release any object chain via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#ad417d9b75178b3c3da38ce4f5e8a3a55">Release</a></dd></dl>
<dl class="section note"><dt>Note</dt><dd>If JSON string part way through then node alignments will not be met, i.e. there maybe more Array or Map closes than opens. In this situation caller should disable via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aa3d5c9be381283fb7e3fc6f108aae978">LimitNodeLevel</a></dd>
<dd>
If JSON object chain to large, consider increasing via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1857f34d7e00cdcf2510a9fe40a520a5">MemoryLimit</a></dd>
<dd>
After use, caller can assess what would be the object chain memory footprint via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a46fcb5f7a85eef8ab886f1771707819a">GetBinarySize</a>. This is calculated even if no objects are generated</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000001">Todo:</a></b></dt><dd>Refactor object chain elements to release themself</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">psi</td><td>Parse start character index, default 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h</td><td>Pointer to pointer of JSON element to take object chain updates. Default is NULL (do not create object chain, just parse). </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Last character index parsed. Debug aid upon error conditions </dd></dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="custom_string_parse_8ino-example.htm#a2">custom_string_parse.ino</a>.</dd>
</dl>

</div>
</div>
<a id="a2c85d62d81a79f6a1a5f5fb9d17fe2c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c85d62d81a79f6a1a5f5fb9d17fe2c5">&#9670;&nbsp;</a></span>Get()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::Get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get I/O object data pointer. </p>
<dl class="section return"><dt>Returns</dt><dd>Pointer to NULL terminated string </dd></dl>

</div>
</div>
<a id="a46fcb5f7a85eef8ab886f1771707819a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46fcb5f7a85eef8ab886f1771707819a">&#9670;&nbsp;</a></span>GetBinarySize()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::GetBinarySize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get object chain binary size. </p>
<p>This will be the result of a character string parse, see <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#abc670f2ed5e813460c299da727c4791c">FromString</a></p>
<dl class="section note"><dt>Note</dt><dd>Increase via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1857f34d7e00cdcf2510a9fe40a520a5">MemoryLimit</a></dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Bytes </dd></dl>

</div>
</div>
<a id="a24c157d15bc07f98f6555472e53e04b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24c157d15bc07f98f6555472e53e04b2">&#9670;&nbsp;</a></span>GetLastError()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8">ERR</a> <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::GetLastError </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get last JSON parse or find error condition (if any). </p>
<p>For list see enum <a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#aac0b5401492d610d8a69a4860e7d13d8">ERR</a></p>
<dl class="section return"><dt>Returns</dt><dd>ERR numeric </dd></dl>

</div>
</div>
<a id="aa931e443cfa598e5fd949575ff58ccad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa931e443cfa598e5fd949575ff58ccad">&#9670;&nbsp;</a></span>GetLastOperation()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41c">OP</a> <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::GetLastOperation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get last or current JSON parse or find operation (if any). </p>
<p>For list see enum <a class="el" href="structgjson_1_1_j_s_o_n_constant.htm#a60c2523719bda53203aed8241303e41c">OP</a></p>
<dl class="section return"><dt>Returns</dt><dd>OP numeric </dd></dl>

</div>
</div>
<a id="af1f934a9de0f5c16cc234a9abe500734"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1f934a9de0f5c16cc234a9abe500734">&#9670;&nbsp;</a></span>IsLiteralCharater()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::IsLiteralCharater </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if character exists within JSON literal alphabet, if all characters of a string were within alphabet then that string could be a literal. </p>
<dl class="section return"><dt>Returns</dt><dd>Literal character state </dd></dl>

</div>
</div>
<a id="aa66f44a617f2ad4482ca3a5d196594c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa66f44a617f2ad4482ca3a5d196594c4">&#9670;&nbsp;</a></span>Length()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::Length </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get I/O object data length, see <a class="el" href="classgjson_1_1_i_o.htm#a70867f05ad07d5e67db7be2544d29e09">gjson::IO::GetLength</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>Characters </dd></dl>

</div>
</div>
<a id="a851a9e93337ea30a695313cc11e95411"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a851a9e93337ea30a695313cc11e95411">&#9670;&nbsp;</a></span>Like()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::Like </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>like</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>case_sensitive</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Setup JSON element to find by <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1ebd8c0fa9404fc2f0d5b5f900f1f091">FindObject</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">like</td><td>Pointer to element containing Like information for JSON search </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">case_sensitive</td><td>For string comparisons, case sensitive flag, default true </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa3d5c9be381283fb7e3fc6f108aae978"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3d5c9be381283fb7e3fc6f108aae978">&#9670;&nbsp;</a></span>LimitNodeLevel()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::LimitNodeLevel </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>limit_node_level</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set limit node level flag. </p>
<p>This affects parsing where Array and Map open and closes are checked and matched</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">limit_node_level</td><td>Flag state, default true </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1857f34d7e00cdcf2510a9fe40a520a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1857f34d7e00cdcf2510a9fe40a520a5">&#9670;&nbsp;</a></span>MemoryLimit()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::MemoryLimit </td>
          <td>(</td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>limit_memory</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get or set object chain creation memory limit (Bytes) </p>
<dl class="section note"><dt>Note</dt><dd>Read required memory via <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a46fcb5f7a85eef8ab886f1771707819a">GetBinarySize</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">limit_memory</td><td>Bytes. Default 0 implies read only, otherwise set and read </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Memory limit, Bytes. If not updated then new value not accepted </dd></dl>

</div>
</div>
<a id="af456b6f067d888ec18aa398980c19066"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af456b6f067d888ec18aa398980c19066">&#9670;&nbsp;</a></span>NextArray()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray</a>&lt;LENGTH&gt;* <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::NextArray </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_open</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parse given JSON object chain looking for next Array object (from given chain entry) Routine uses <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1ebd8c0fa9404fc2f0d5b5f900f1f091">FindObject</a>, see for further details. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Pointer to first JSON element in object chain </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_open</td><td>Array must be an open(true, default) or close type(false) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Found element pointer or NULL (not found) </dd></dl>

</div>
</div>
<a id="ac9d3cab50dda72ef49355abeea3dc61c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9d3cab50dda72ef49355abeea3dc61c">&#9670;&nbsp;</a></span>NextMap()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_map.htm">JSONMap</a>&lt;LENGTH&gt;* <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::NextMap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_open</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parse given JSON object chain looking for next Map object (from given chain entry). </p>
<p>Routine uses <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1ebd8c0fa9404fc2f0d5b5f900f1f091">FindObject</a>, see for further details.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Pointer to first JSON element in object chain </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_open</td><td>Map must be an open(true, default) or close type(false) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Found element pointer or NULL (not found) </dd></dl>

</div>
</div>
<a id="a1161c22b54f27000141b457fc6a458df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1161c22b54f27000141b457fc6a458df">&#9670;&nbsp;</a></span>NextString()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a>&lt;LENGTH&gt;* <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::NextString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_value</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parse given JSON object chain looking for next String object (from given chain entry). </p>
<p>Routine uses <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a1ebd8c0fa9404fc2f0d5b5f900f1f091">FindObject</a>, see for further details.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Pointer to first JSON element in object chain </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_value</td><td>String must be a value(true, default) or property/attribute type(false) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Found element pointer or NULL (not found) </dd></dl>

</div>
</div>
<a id="ad417d9b75178b3c3da38ce4f5e8a3a55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad417d9b75178b3c3da38ce4f5e8a3a55">&#9670;&nbsp;</a></span>Release()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::Release </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classgjson_1_1_j_s_o_n_element.htm">JSONElement</a>&lt; LENGTH &gt; **&#160;</td>
          <td class="paramname"><em>h</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Release object chain. </p>
<dl class="section attention"><dt>Attention</dt><dd>Caller should make sure no pointers in other objects exist to elements of the released chain prior to invoke.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000003">Todo:</a></b></dt><dd>Attempt to remove this method</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">h</td><td>Pointer to pointer of first JSON element in object chain. This will be NULLed upon completion </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae452d7337e07f183e8f4a73d4024e3a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae452d7337e07f183e8f4a73d4024e3a0">&#9670;&nbsp;</a></span>TokenArray()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::TokenArray </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Callback for JSON array element handling. </p>
<p>Invoked from Parsing JSON strings, objects and when searching.</p>
<p>The return value mean is dependant on current operation, <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aa931e443cfa598e5fd949575ff58ccad">JSONParse::GetLastOperation</a> If OP_FROM_STRING true -&gt; stop parsing If OP_FROM_OBJECT true -&gt; does nothing If OP_FIND_OBJECT true -&gt; take object, found</p>
<p>When implementing functionality in a subclass, setting an error condition will also terminate current operation, see last_error_ and <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a24c157d15bc07f98f6555472e53e04b2">JSONParse::GetLastError</a></p>
<dl class="section note"><dt>Note</dt><dd>You may update source string but operation on data should be terminated if you are likely to affect output with change. </dd>
<dd>
Do not release element instance</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Array element pointer. Updates can be made to element so long as the symantics of JSON are not broken. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>Source JSON string pointer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Current parse character index into source JSON string </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Operation dependant meaning, see above </td></tr>
    <tr><td class="paramname">false</td><td>Continue operation </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classgjson_1_1_j_s_o_n_tokenizer.htm#aaa7aa236f8bb7f98284e3ac9b497a760">gjson::JSONTokenizer&lt; LENGTH &gt;</a>.</p>

<p>Reimplemented in <a class="el" href="classgjson_1_1_j_s_o_n_example_object_parse.htm#aec3a7bf2442964a3e91a62b421085d16">gjson::JSONExampleObjectParse&lt; LENGTH &gt;</a>, <a class="el" href="classgjson_1_1_j_s_o_n_example_string_parse.htm#a1a080bff6f99c70278e2fe24599b7681">gjson::JSONExampleStringParse&lt; LENGTH &gt;</a>, and <a class="el" href="classgjson_1_1_j_s_o_n_simple_string_parse_attr.htm#ac6e2e9764e0ca9601a8681532ac04774">gjson::JSONSimpleStringParseAttr&lt; LENGTH &gt;</a>.</p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="custom_object_parse_8ino-example.htm#a4">custom_object_parse.ino</a>.</dd>
</dl>

</div>
</div>
<a id="ad2978c64590a563494b529baf9a3d8e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2978c64590a563494b529baf9a3d8e6">&#9670;&nbsp;</a></span>TokenMap()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::TokenMap </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgjson_1_1_j_s_o_n_array.htm">JSONArray</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>i</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Callback for JSON map element handling. </p>
<p>Invoked from Parsing JSON strings, objects and when searching.</p>
<p>The return value mean is dependant on current operation, <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aa931e443cfa598e5fd949575ff58ccad">JSONParse::GetLastOperation</a> If OP_FROM_STRING true -&gt; stop parsing If OP_FROM_OBJECT true -&gt; does nothing If OP_FIND_OBJECT true -&gt; take object, found</p>
<p>When implementing functionality in a subclass, setting an error condition will also terminate current operation, see last_error_ and <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a24c157d15bc07f98f6555472e53e04b2">JSONParse::GetLastError</a></p>
<dl class="section note"><dt>Note</dt><dd>You may update source string but operation on data should be terminated if you are likely to affect output with change. </dd>
<dd>
Do not release element instance</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Array element pointer. Updates can be made to element so long as the symantics of JSON are not broken. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>Source JSON string pointer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>Current parse character index into source JSON string </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Operation dependant meaning, see above </td></tr>
    <tr><td class="paramname">false</td><td>Continue operation </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classgjson_1_1_j_s_o_n_tokenizer.htm#a95c69d68ac7f40c71f05ee14dcbcdf34">gjson::JSONTokenizer&lt; LENGTH &gt;</a>.</p>

<p>Reimplemented in <a class="el" href="classgjson_1_1_j_s_o_n_example_object_parse.htm#ad673a890fc90b127922828f14a93f0d6">gjson::JSONExampleObjectParse&lt; LENGTH &gt;</a>, <a class="el" href="classgjson_1_1_j_s_o_n_example_string_parse.htm#a3d5859088f968450b7a32a93d16004eb">gjson::JSONExampleStringParse&lt; LENGTH &gt;</a>, and <a class="el" href="classgjson_1_1_j_s_o_n_simple_string_parse_attr.htm#a9c06b6e3e8ef6c1b27cfc88a1e9edc15">gjson::JSONSimpleStringParseAttr&lt; LENGTH &gt;</a>.</p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="custom_object_parse_8ino-example.htm#a8">custom_object_parse.ino</a>.</dd>
</dl>

</div>
</div>
<a id="a64ecc54e29da2a937bf9bd1e1cac5852"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64ecc54e29da2a937bf9bd1e1cac5852">&#9670;&nbsp;</a></span>TokenString()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;uint8_t LENGTH&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">gjson::JSONParse</a>&lt; LENGTH &gt;::TokenString </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgjson_1_1_j_s_o_n_string.htm">JSONString</a>&lt; LENGTH &gt; *&#160;</td>
          <td class="paramname"><em>e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int16_t&#160;</td>
          <td class="paramname"><em>si</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int16_t&#160;</td>
          <td class="paramname"><em>ei</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Callback for JSON string element handling. </p>
<p>A string could be a property/attribute or value. Invoked from Parsing JSON strings, objects and when searching.</p>
<p>The return value mean is dependant on current operation, <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#aa931e443cfa598e5fd949575ff58ccad">JSONParse::GetLastOperation</a> If OP_FROM_STRING true -&gt; stop parsing If OP_FROM_OBJECT true -&gt; does nothing If OP_FIND_OBJECT true -&gt; take object, found</p>
<p>When implementing functionality in a subclass, setting an error condition will also terminate current operation, see last_error_ and <a class="el" href="classgjson_1_1_j_s_o_n_parse.htm#a24c157d15bc07f98f6555472e53e04b2">JSONParse::GetLastError</a>.</p>
<dl class="section note"><dt>Note</dt><dd>You may update source string but operation on data should be terminated if you are likely to affect output with change. </dd>
<dd>
Do not release element instance</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>Array element pointer. Updates can be made to element so long as the symantics of JSON are not broken. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>Source JSON string pointer </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">si</td><td>Start character index into source JSON string. -1 not setup </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ei</td><td>End character index into source JSON string. -1 not setup </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>Operation dependant meaning, see above </td></tr>
    <tr><td class="paramname">false</td><td>Continue operation </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classgjson_1_1_j_s_o_n_tokenizer.htm#a4a1fbc63ba92a7d1af93c71214fcf7da">gjson::JSONTokenizer&lt; LENGTH &gt;</a>.</p>

<p>Reimplemented in <a class="el" href="classgjson_1_1_j_s_o_n_example_object_parse.htm#af011da7688181f6955f1c593c8ce9a72">gjson::JSONExampleObjectParse&lt; LENGTH &gt;</a>, <a class="el" href="classgjson_1_1_j_s_o_n_example_string_parse.htm#abbd6315f4a91c57614b305826920e61e">gjson::JSONExampleStringParse&lt; LENGTH &gt;</a>, <a class="el" href="classgjson_1_1_j_s_o_n_simple_string_parse.htm#a0393b02d2eba611a7c3eb5bedd4ee582">gjson::JSONSimpleStringParse&lt; LENGTH &gt;</a>, and <a class="el" href="classgjson_1_1_j_s_o_n_simple_string_parse_attr.htm#ae1abcfb198459f4b289688d2e7d0a385">gjson::JSONSimpleStringParseAttr&lt; LENGTH &gt;</a>.</p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="custom_object_parse_8ino-example.htm#a9">custom_object_parse.ino</a>.</dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>gjson</b></li><li class="navelem"><a class="el" href="classgjson_1_1_j_s_o_n_parse.htm">JSONParse</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 19:32:36 for ArduinoGJSON by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
